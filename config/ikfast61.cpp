/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-06-26 13:23:30.495071
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((IkReal(0.184600000000000))*(x0));
x11=((IkReal(0.139000000000000))*(x0));
x12=((IkReal(1.00000000000000))*(x5));
x13=((IkReal(0.184600000000000))*(x4));
x14=((IkReal(0.139000000000000))*(x6));
x15=((IkReal(1.00000000000000))*(x7));
x16=((IkReal(1.00000000000000))*(x6));
x17=((IkReal(1.00000000000000))*(x0));
x18=((IkReal(0.184600000000000))*(x6));
x19=((x1)*(x2));
x20=((x1)*(x6));
x21=((x2)*(x3));
x22=((x3)*(x4));
x23=((x1)*(x4));
IkReal x24=((IkReal(1.00000000000000))*(x22));
eetrans[0]=((((IkReal(0.190000000000000))*(x0)*(x1)))+(((x7)*(((((x10)*(x23)))+(((x10)*(x21)))))))+(((x5)*(((((IkReal(-1.00000000000000))*(x10)*(x24)))+(((x10)*(x19)))))))+(((x11)*(x19)))+(((IkReal(-1.00000000000000))*(x11)*(x24))));
eetrans[1]=((((x7)*(((((x18)*(x21)))+(((x13)*(x20)))))))+(((IkReal(0.190000000000000))*(x20)))+(((x14)*(x19)))+(((IkReal(-1.00000000000000))*(x14)*(x22)))+(((x5)*(((((x18)*(x19)))+(((IkReal(-1.00000000000000))*(x13)*(x3)*(x6))))))));
eetrans[2]=((IkReal(0.201500000000000))+(((x5)*(((((x1)*(x13)))+(((IkReal(0.184600000000000))*(x21)))))))+(((IkReal(0.190000000000000))*(x3)))+(((x7)*(((((IkReal(-0.184600000000000))*(x19)))+(((x13)*(x3)))))))+(((IkReal(0.139000000000000))*(x23)))+(((IkReal(0.139000000000000))*(x21))));
eerot[0]=((((IkReal(-1.00000000000000))*(x8)*(((((x12)*(((((x0)*(x21)))+(((x0)*(x23)))))))+(((x15)*(((((IkReal(-1.00000000000000))*(x17)*(x19)))+(((x17)*(x22)))))))))))+(((IkReal(-1.00000000000000))*(x16)*(x9))));
eerot[1]=((((x0)*(x9)))+(((IkReal(-1.00000000000000))*(x8)*(((((x12)*(((((x21)*(x6)))+(((x20)*(x4)))))))+(((x15)*(((((IkReal(-1.00000000000000))*(x16)*(x19)))+(((x16)*(x22))))))))))));
eerot[2]=((IkReal(-1.00000000000000))*(x8)*(((((x12)*(((((IkReal(-1.00000000000000))*(x19)))+(x22)))))+(((x15)*(((((IkReal(-1.00000000000000))*(x21)))+(((IkReal(-1.00000000000000))*(x23))))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((IkReal(-0.201500000000000))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x25=IKatan2(((IkReal(-1.00000000000000))*(py)), px);
j0array[0]=((IkReal(-1.00000000000000))*(x25));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x25))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
op[0]=((((IkReal(-4.00000000000000))*(pp)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.0590246400000000))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(0.0671160000000000))*((pz)*(pz))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.0131466016000000))*(cj0)*(px)*((r02)*(r02))))+(((IkReal(8.00000000000000))*(cj0)*(px)*(py)*(sj0)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(0.288800000000000))*(px)*(py)*(r00)*(r01)))+((((pp)*(pp))*((r02)*(r02))))+(((IkReal(0.203424640000000))*(py)*(pz)*(r01)*(r02)))+(((IkReal(-0.760000000000000))*(pp)*(px)*(r00)*(r01)*(sj0)))+(((IkReal(4.00000000000000))*((py)*(py)*(py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.134232000000000))*(cj0)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((IkReal(3.04000000000000))*(cj0)*(py)*(r00)*(r01)*((px)*(px))))+(((IkReal(4.00000000000000))*((py)*(py))*((pz)*(pz))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(16.0000000000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(16.0000000000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))*((py)*(py))))+(((IkReal(0.203424640000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(1.52000000000000))*(px)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(3.04000000000000))*(px)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(0.203424640000000))*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*(cj0)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-0.760000000000000))*(pp)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(8.00000000000000))*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(16.0000000000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(1.52000000000000))*(cj0)*(px)*((py)*(py))*((r01)*(r01))))+(((IkReal(0.203424640000000))*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(8.00000000000000))*(pz)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-4.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)))+(((IkReal(-0.760000000000000))*(cj0)*(pp)*(px)*((r00)*(r00))))+(((IkReal(0.0386506816000000))*(cj0)*(px)*((r00)*(r00))))+(((IkReal(0.203424640000000))*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(0.760000000000000))*(cj0)*(pp)*(px)*((r02)*(r02))))+(((IkReal(2.00000000000000))*(cj0)*(r00)*(r01)*(sj0)*((pp)*(pp))))+(((IkReal(0.203424640000000))*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+((((cj0)*(cj0))*((pp)*(pp))*((r00)*(r00))))+(((IkReal(1.52000000000000))*(r01)*(r02)*(sj0)*((pz)*(pz)*(pz))))+(((IkReal(4.00000000000000))*((cj0)*(cj0))*((px)*(px))*((py)*(py))*((r01)*(r01))))+(((IkReal(0.203424640000000))*(cj0)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(0.0386506816000000))*(px)*(r00)*(r01)*(sj0)))+(((IkReal(0.0671160000000000))*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(-4.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-1.52000000000000))*(cj0)*(pp)*(pz)*(r00)*(r02)))+(((IkReal(0.0671160000000000))*((cj0)*(cj0))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(8.00000000000000))*(px)*(pz)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(0.00258634900994560))*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(0.0691926400000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(0.0691926400000000))*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-1.52000000000000))*(pp)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(0.0386506816000000))*(cj0)*(py)*(r00)*(r01)))+(((IkReal(1.52000000000000))*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(0.0517972832000000))*(cj0)*(pz)*(r00)*(r02)))+(((IkReal(0.203424640000000))*(cj0)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(0.0671160000000000))*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(-0.760000000000000))*(cj0)*(pp)*(py)*(r00)*(r01)))+(((IkReal(0.0691926400000000))*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*(px)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(8.00000000000000))*(py)*(r00)*(r01)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(0.0386506816000000))*(py)*(sj0)*((r01)*(r01))))+(((IkReal(8.00000000000000))*(px)*(r00)*(r01)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*(cj0)*(px)*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(-0.0131466016000000))*(py)*(sj0)*((r02)*(r02))))+(((IkReal(0.00517269801989120))*(cj0)*(r00)*(r01)*(sj0)))+((((pp)*(pp))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*(cj0)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-0.101712320000000))*(pp)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*(cj0)*(py)*(sj0)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(0.0517972832000000))*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(0.0426876800000000))*(pp)*((r02)*(r02))))+(((IkReal(4.00000000000000))*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(-4.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-0.00233439289405440))*((r02)*(r02))))+(((IkReal(-4.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-4.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*(py)*(pz)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(0.144400000000000))*((px)*(px))*((r00)*(r00))))+(((IkReal(0.203424640000000))*(px)*(pz)*(r00)*(r02)))+(((IkReal(0.00258634900994560))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-4.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)))+(((IkReal(0.134232000000000))*(cj0)*(px)*(py)*(sj0)*((r02)*(r02))))+(((IkReal(8.00000000000000))*(pz)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(0.0691926400000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(1.52000000000000))*(py)*(sj0)*((px)*(px))*((r00)*(r00))))+(((IkReal(4.00000000000000))*((cj0)*(cj0))*((px)*(px))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(1.52000000000000))*(cj0)*(pz)*(r00)*(r02)*((px)*(px))))+(((IkReal(1.52000000000000))*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(0.203424640000000))*(cj0)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(-4.00000000000000))*(pp)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(1.52000000000000))*(py)*(sj0)*((pz)*(pz))*((r01)*(r01))))+(((IkReal(4.00000000000000))*((px)*(px))*((py)*(py))*((r00)*(r00))*((sj0)*(sj0))))+(((IkReal(4.00000000000000))*((cj0)*(cj0))*((px)*(px)*(px)*(px))*((r00)*(r00))))+(((IkReal(4.00000000000000))*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(0.760000000000000))*(pp)*(py)*(sj0)*((r02)*(r02))))+(((IkReal(1.52000000000000))*(cj0)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(-4.00000000000000))*(pp)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.203424640000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((IkReal(4.00000000000000))*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(8.00000000000000))*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(1.52000000000000))*(cj0)*(px)*(py)*(pz)*(r01)*(r02)))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(0.144400000000000))*((py)*(py))*((r01)*(r01))))+(((IkReal(1.52000000000000))*(cj0)*(px)*((pz)*(pz))*((r00)*(r00))))+(((IkReal(-0.101712320000000))*(pp)*((cj0)*(cj0))*((r00)*(r00)))));
op[1]=((((IkReal(0.0525864064000000))*(cj0)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(-6.08000000000000))*(px)*(py)*(pz)*(r00)*(r01)))+(((IkReal(-6.08000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r02)*(r02))))+(((IkReal(3.04000000000000))*(px)*(r00)*(r02)*((cj0)*(cj0))*((pz)*(pz))))+(((IkReal(1.52000000000000))*(pp)*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(3.04000000000000))*(cj0)*(px)*(r01)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(-6.08000000000000))*(cj0)*(px)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(-0.0196829676160000))*(cj0)*(r00)*(r02)))+(((IkReal(-3.04000000000000))*((pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.577600000000000))*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(-3.04000000000000))*(px)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(0.0262932032000000))*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*(cj0)*(pp)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(1.52000000000000))*(pp)*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-3.04000000000000))*(pz)*((py)*(py))*((r01)*(r01))))+(((IkReal(3.04000000000000))*(cj0)*(py)*(r00)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(-0.0262932032000000))*(cj0)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(-3.04000000000000))*(cj0)*(pp)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(-0.577600000000000))*(cj0)*(px)*(pz)*((r02)*(r02))))+(((IkReal(-0.577600000000000))*(py)*(pz)*(sj0)*((r02)*(r02))))+(((IkReal(-0.577600000000000))*(cj0)*(px)*(py)*(r01)*(r02)))+(((IkReal(-0.577600000000000))*(px)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(-0.577600000000000))*(cj0)*(py)*(pz)*(r00)*(r01)))+(((IkReal(-0.577600000000000))*(r01)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(3.04000000000000))*(pz)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(3.04000000000000))*(cj0)*(pz)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(-0.577600000000000))*(cj0)*(r00)*(r02)*((px)*(px))))+(((IkReal(-6.08000000000000))*(px)*(r00)*(r02)*((pz)*(pz))))+(((IkReal(-3.04000000000000))*(pz)*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(-1.52000000000000))*(pp)*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(3.04000000000000))*(px)*(py)*(pz)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*(pp)*(py)*(r01)*(r02)))+(((IkReal(0.577600000000000))*(pp)*(r01)*(r02)*(sj0)))+(((IkReal(3.04000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r01)*(r01))))+(((IkReal(-0.0773013632000000))*(py)*(r01)*(r02)))+(((IkReal(3.04000000000000))*(pz)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.0262932032000000))*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*(pp)*(pz)*((r02)*(r02))))+(((IkReal(-6.08000000000000))*(cj0)*(py)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(-3.04000000000000))*(pz)*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(-0.0262932032000000))*(cj0)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(-0.577600000000000))*(cj0)*(r00)*(r02)*((pz)*(pz))))+(((IkReal(3.04000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r00)*(r00))))+(((IkReal(-0.577600000000000))*(cj0)*(px)*(pz)*((r00)*(r00))))+(((IkReal(-3.04000000000000))*(py)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-6.08000000000000))*(py)*(r01)*(r02)*((pz)*(pz))))+(((IkReal(-3.04000000000000))*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(3.04000000000000))*(px)*(py)*(pz)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-0.0773013632000000))*(pz)*((r02)*(r02))))+(((IkReal(0.577600000000000))*(cj0)*(pp)*(r00)*(r02)))+(((IkReal(-0.577600000000000))*(px)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(1.52000000000000))*(cj0)*(pp)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(-0.0196829676160000))*(r01)*(r02)*(sj0)))+(((IkReal(-1.52000000000000))*(pp)*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-3.04000000000000))*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-0.577600000000000))*(py)*(pz)*(sj0)*((r01)*(r01))))+(((IkReal(1.52000000000000))*(pp)*(px)*(r00)*(r02)))+(((IkReal(3.04000000000000))*(cj0)*(pz)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(3.04000000000000))*(py)*(r01)*(r02)*((pz)*(pz))*((sj0)*(sj0))))+(((IkReal(-0.0773013632000000))*(px)*(r00)*(r02)))+(((IkReal(-3.04000000000000))*(pz)*((px)*(px))*((r00)*(r00))))+(((IkReal(0.0262932032000000))*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(-0.0262932032000000))*(px)*(r00)*(r02)*((cj0)*(cj0)))));
op[2]=((((IkReal(-8.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-1.01681472000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(-0.0145102695961088))*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(16.0000000000000))*(py)*(r00)*(r01)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(0.288800000000000))*((py)*(py))*((r01)*(r01))))+(((IkReal(0.134232000000000))*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(32.0000000000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(16.0000000000000))*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(0.748350720000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((IkReal(-8.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-8.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)))+(((IkReal(16.0000000000000))*(cj0)*(py)*(sj0)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-0.748350720000000))*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-0.748350720000000))*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(16.0000000000000))*(px)*(r00)*(r01)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-0.492224640000000))*(pp)*((r02)*(r02))))+(((IkReal(0.0150141818278912))*((r02)*(r02))))+(((IkReal(8.00000000000000))*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(32.0000000000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))*((py)*(py))))+(((IkReal(16.0000000000000))*(pz)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(0.577600000000000))*(px)*(py)*(r00)*(r01)))+(((IkReal(-0.748350720000000))*(cj0)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(16.0000000000000))*(pz)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-0.0145102695961088))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*((cj0)*(cj0))*((px)*(px))*((py)*(py))*((r01)*(r01))))+(((IkReal(8.00000000000000))*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(-0.0290205391922176))*(cj0)*(r00)*(r01)*(sj0)))+(((IkReal(8.00000000000000))*((cj0)*(cj0))*((px)*(px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-8.00000000000000))*(pp)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.134232000000000))*((cj0)*(cj0))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(16.0000000000000))*(px)*(pz)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-0.748350720000000))*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-8.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(16.0000000000000))*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(8.00000000000000))*((py)*(py)*(py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-1.01681472000000))*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(1.56204928000000))*(py)*(pz)*(r01)*(r02)))+(((IkReal(8.00000000000000))*((py)*(py))*((pz)*(pz))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(-8.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)))+(((IkReal(2.00000000000000))*((pp)*(pp))*((r02)*(r02))))+(((IkReal(-8.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-1.01681472000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(2.00000000000000))*((cj0)*(cj0))*((pp)*(pp))*((r00)*(r00))))+(((IkReal(-0.748350720000000))*(cj0)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(-0.748350720000000))*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(0.288800000000000))*((px)*(px))*((r00)*(r00))))+(((IkReal(32.0000000000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(2.00000000000000))*((pp)*(pp))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(4.00000000000000))*(cj0)*(r00)*(r01)*(sj0)*((pp)*(pp))))+(((IkReal(-8.00000000000000))*(pp)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-1.01681472000000))*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(16.0000000000000))*(cj0)*(px)*(py)*(sj0)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(8.00000000000000))*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(-8.00000000000000))*(pp)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(16.0000000000000))*(cj0)*(px)*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(-0.748350720000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(0.134232000000000))*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(1.27324928000000))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(8.00000000000000))*((px)*(px))*((py)*(py))*((r00)*(r00))*((sj0)*(sj0))))+(((IkReal(-8.00000000000000))*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(0.268464000000000))*(cj0)*(px)*(py)*(sj0)*((r02)*(r02))))+(((IkReal(16.0000000000000))*(py)*(pz)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-8.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(0.374175360000000))*(pp)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(-8.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-8.00000000000000))*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(0.268464000000000))*(cj0)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((IkReal(8.00000000000000))*((cj0)*(cj0))*((px)*(px))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(0.134232000000000))*((pz)*(pz))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-8.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(-8.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(16.0000000000000))*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(1.56204928000000))*(px)*(pz)*(r00)*(r02)))+(((IkReal(-0.748350720000000))*(cj0)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(0.374175360000000))*(pp)*((r01)*(r01))*((sj0)*(sj0)))));
op[3]=((((IkReal(0.0525864064000000))*(cj0)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(-6.08000000000000))*(px)*(py)*(pz)*(r00)*(r01)))+(((IkReal(-6.08000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r02)*(r02))))+(((IkReal(3.04000000000000))*(px)*(r00)*(r02)*((cj0)*(cj0))*((pz)*(pz))))+(((IkReal(1.52000000000000))*(pp)*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(3.04000000000000))*(cj0)*(px)*(r01)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(-0.577600000000000))*(cj0)*(pp)*(r00)*(r02)))+(((IkReal(0.577600000000000))*(cj0)*(px)*(pz)*((r02)*(r02))))+(((IkReal(-6.08000000000000))*(cj0)*(px)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(-3.04000000000000))*((pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(-3.04000000000000))*(px)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(0.0196829676160000))*(r01)*(r02)*(sj0)))+(((IkReal(0.577600000000000))*(r01)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(0.0262932032000000))*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*(cj0)*(pp)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(1.52000000000000))*(pp)*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-3.04000000000000))*(pz)*((py)*(py))*((r01)*(r01))))+(((IkReal(3.04000000000000))*(cj0)*(py)*(r00)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(-0.0262932032000000))*(cj0)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(0.577600000000000))*(py)*(pz)*(sj0)*((r02)*(r02))))+(((IkReal(-3.04000000000000))*(cj0)*(pp)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(0.577600000000000))*(cj0)*(py)*(pz)*(r00)*(r01)))+(((IkReal(0.577600000000000))*(cj0)*(r00)*(r02)*((px)*(px))))+(((IkReal(0.577600000000000))*(cj0)*(px)*(pz)*((r00)*(r00))))+(((IkReal(3.04000000000000))*(pz)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(3.04000000000000))*(cj0)*(pz)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(0.0196829676160000))*(cj0)*(r00)*(r02)))+(((IkReal(-6.08000000000000))*(px)*(r00)*(r02)*((pz)*(pz))))+(((IkReal(0.577600000000000))*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(0.577600000000000))*(py)*(pz)*(sj0)*((r01)*(r01))))+(((IkReal(-3.04000000000000))*(pz)*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(-1.52000000000000))*(pp)*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(3.04000000000000))*(px)*(py)*(pz)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*(pp)*(py)*(r01)*(r02)))+(((IkReal(3.04000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r01)*(r01))))+(((IkReal(-0.0773013632000000))*(py)*(r01)*(r02)))+(((IkReal(3.04000000000000))*(pz)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.0262932032000000))*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*(pp)*(pz)*((r02)*(r02))))+(((IkReal(-6.08000000000000))*(cj0)*(py)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(0.577600000000000))*(cj0)*(r00)*(r02)*((pz)*(pz))))+(((IkReal(-3.04000000000000))*(pz)*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(-0.0262932032000000))*(cj0)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(3.04000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r00)*(r00))))+(((IkReal(0.577600000000000))*(cj0)*(px)*(py)*(r01)*(r02)))+(((IkReal(-3.04000000000000))*(py)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-6.08000000000000))*(py)*(r01)*(r02)*((pz)*(pz))))+(((IkReal(-3.04000000000000))*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(3.04000000000000))*(px)*(py)*(pz)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-0.0773013632000000))*(pz)*((r02)*(r02))))+(((IkReal(1.52000000000000))*(cj0)*(pp)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(-0.577600000000000))*(pp)*(r01)*(r02)*(sj0)))+(((IkReal(-1.52000000000000))*(pp)*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.577600000000000))*(px)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(-3.04000000000000))*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*(pp)*(px)*(r00)*(r02)))+(((IkReal(3.04000000000000))*(cj0)*(pz)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(3.04000000000000))*(py)*(r01)*(r02)*((pz)*(pz))*((sj0)*(sj0))))+(((IkReal(-0.0773013632000000))*(px)*(r00)*(r02)))+(((IkReal(-3.04000000000000))*(pz)*((px)*(px))*((r00)*(r00))))+(((IkReal(0.0262932032000000))*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(0.577600000000000))*(px)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(-0.0262932032000000))*(px)*(r00)*(r02)*((cj0)*(cj0)))));
op[4]=((((IkReal(-4.00000000000000))*(pp)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.0590246400000000))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(0.0671160000000000))*((pz)*(pz))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*(cj0)*(px)*(py)*(sj0)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(0.288800000000000))*(px)*(py)*(r00)*(r01)))+((((pp)*(pp))*((r02)*(r02))))+(((IkReal(0.760000000000000))*(cj0)*(pp)*(px)*((r00)*(r00))))+(((IkReal(0.203424640000000))*(py)*(pz)*(r01)*(r02)))+(((IkReal(4.00000000000000))*((py)*(py)*(py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.134232000000000))*(cj0)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((IkReal(0.760000000000000))*(cj0)*(pp)*(py)*(r00)*(r01)))+(((IkReal(4.00000000000000))*((py)*(py))*((pz)*(pz))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(16.0000000000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(16.0000000000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))*((py)*(py))))+(((IkReal(0.203424640000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(0.760000000000000))*(pp)*(px)*(r00)*(r01)*(sj0)))+(((IkReal(0.203424640000000))*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(16.0000000000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(-1.52000000000000))*(px)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(0.203424640000000))*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(8.00000000000000))*(pz)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-0.0517972832000000))*(cj0)*(pz)*(r00)*(r02)))+(((IkReal(-4.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)))+(((IkReal(0.203424640000000))*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-1.52000000000000))*(py)*(sj0)*((pz)*(pz))*((r01)*(r01))))+(((IkReal(-0.760000000000000))*(cj0)*(pp)*(px)*((r02)*(r02))))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(r00)*(r01)*(sj0)*((pp)*(pp))))+(((IkReal(-1.52000000000000))*(cj0)*(px)*((pz)*(pz))*((r00)*(r00))))+(((IkReal(0.203424640000000))*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+((((cj0)*(cj0))*((pp)*(pp))*((r00)*(r00))))+(((IkReal(4.00000000000000))*((cj0)*(cj0))*((px)*(px))*((py)*(py))*((r01)*(r01))))+(((IkReal(0.203424640000000))*(cj0)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(0.0671160000000000))*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(-4.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-1.52000000000000))*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(-3.04000000000000))*(cj0)*(py)*(r00)*(r01)*((px)*(px))))+(((IkReal(0.0671160000000000))*((cj0)*(cj0))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(8.00000000000000))*(px)*(pz)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(0.00258634900994560))*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(0.0691926400000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(-1.52000000000000))*(px)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((IkReal(0.0691926400000000))*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(0.0131466016000000))*(py)*(sj0)*((r02)*(r02))))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(0.203424640000000))*(cj0)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(0.0671160000000000))*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(0.0691926400000000))*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-1.52000000000000))*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(-1.52000000000000))*(cj0)*(px)*((py)*(py))*((r01)*(r01))))+(((IkReal(8.00000000000000))*(py)*(r00)*(r01)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(8.00000000000000))*(px)*(r00)*(r01)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*(cj0)*(px)*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(-1.52000000000000))*(cj0)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(0.00517269801989120))*(cj0)*(r00)*(r01)*(sj0)))+((((pp)*(pp))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-1.52000000000000))*(cj0)*(px)*(py)*(pz)*(r01)*(r02)))+(((IkReal(-0.0386506816000000))*(px)*(r00)*(r01)*(sj0)))+(((IkReal(-0.760000000000000))*(pp)*(py)*(sj0)*((r02)*(r02))))+(((IkReal(-0.0386506816000000))*(py)*(sj0)*((r01)*(r01))))+(((IkReal(0.0131466016000000))*(cj0)*(px)*((r02)*(r02))))+(((IkReal(0.760000000000000))*(pp)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(-0.101712320000000))*(pp)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*(cj0)*(py)*(sj0)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(0.0426876800000000))*(pp)*((r02)*(r02))))+(((IkReal(4.00000000000000))*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(-4.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-0.00233439289405440))*((r02)*(r02))))+(((IkReal(-1.52000000000000))*(cj0)*(pz)*(r00)*(r02)*((px)*(px))))+(((IkReal(-3.04000000000000))*(px)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(-4.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-4.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*(py)*(pz)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(0.144400000000000))*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.0517972832000000))*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(1.52000000000000))*(cj0)*(pp)*(pz)*(r00)*(r02)))+(((IkReal(0.203424640000000))*(px)*(pz)*(r00)*(r02)))+(((IkReal(0.00258634900994560))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-4.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)))+(((IkReal(0.134232000000000))*(cj0)*(px)*(py)*(sj0)*((r02)*(r02))))+(((IkReal(8.00000000000000))*(pz)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(0.0691926400000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(4.00000000000000))*((cj0)*(cj0))*((px)*(px))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(0.203424640000000))*(cj0)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(-4.00000000000000))*(pp)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-1.52000000000000))*(py)*(sj0)*((px)*(px))*((r00)*(r00))))+(((IkReal(4.00000000000000))*((px)*(px))*((py)*(py))*((r00)*(r00))*((sj0)*(sj0))))+(((IkReal(4.00000000000000))*((cj0)*(cj0))*((px)*(px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-1.52000000000000))*(cj0)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(4.00000000000000))*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(-4.00000000000000))*(pp)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(1.52000000000000))*(pp)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(-1.52000000000000))*(cj0)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-0.203424640000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((IkReal(4.00000000000000))*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(8.00000000000000))*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-1.52000000000000))*(r01)*(r02)*(sj0)*((pz)*(pz)*(pz))))+(((IkReal(-0.0386506816000000))*(cj0)*(py)*(r00)*(r01)))+(((IkReal(-0.0386506816000000))*(cj0)*(px)*((r00)*(r00))))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(0.144400000000000))*((py)*(py))*((r01)*(r01))))+(((IkReal(-0.101712320000000))*(pp)*((cj0)*(cj0))*((r00)*(r00)))));
polyroots4(op,zeror,numroots);
IkReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[4]={true,true,true,true};
_nj1 = 4;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(cj4);
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
IkReal x26=(pz)*(pz);
IkReal x27=(py)*(py);
IkReal x28=(px)*(px);
IkReal x29=((r01)*(sj0));
IkReal x30=((IkReal(0.190000000000000))*(cj1));
IkReal x31=((pp)*(sj1));
IkReal x32=((IkReal(1.00000000000000))*(r02));
IkReal x33=((IkReal(2.00000000000000))*(pz));
IkReal x34=((IkReal(1.00000000000000))*(pz));
IkReal x35=((IkReal(0.380000000000000))*(pz));
IkReal x36=((py)*(sj1));
IkReal x37=((px)*(sj0));
IkReal x38=((cj0)*(r00));
IkReal x39=((IkReal(1.00000000000000))*(cj1));
IkReal x40=((cj0)*(py));
IkReal x41=((IkReal(2.00000000000000))*(sj1));
IkReal x42=((IkReal(0.0361000000000000))*(cj1));
IkReal x43=((IkReal(0.0361000000000000))*(sj1));
IkReal x44=((IkReal(2.00000000000000))*(cj1));
IkReal x45=((IkReal(0.190000000000000))*(sj1));
IkReal x46=((cj0)*(r01));
IkReal x47=((py)*(r01));
IkReal x48=((px)*(r00));
IkReal x49=((py)*(r02)*(sj0));
IkReal x50=((cj0)*(px)*(r02));
IkReal x51=((r02)*(x26));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x37)))+(x40));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(x46));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj1)*(x32)))+(((sj1)*(x38)))+(((sj1)*(x29))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x48)))+(((IkReal(-1.00000000000000))*(x47)))+(((x29)*(x30)))+(((IkReal(-1.00000000000000))*(pz)*(x32)))+(((r02)*(x45)))+(((x30)*(x38))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x29)*(x39)))+(((IkReal(-1.00000000000000))*(x38)*(x39)))+(((IkReal(-1.00000000000000))*(sj1)*(x32))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x29)*(x34)))+(((IkReal(-1.00000000000000))*(r02)*(x30)))+(((x29)*(x45)))+(((x38)*(x45)))+(x49)+(x50)+(((IkReal(-1.00000000000000))*(x34)*(x38))));
evalcond[7]=((((cj1)*(x33)*(x50)))+(((IkReal(-1.00000000000000))*(r02)*(x35)))+(((x29)*(x42)))+(((py)*(r00)*(x37)*(x44)))+(((IkReal(-1.00000000000000))*(pp)*(x38)*(x39)))+(((sj1)*(x33)*(x48)))+(((x38)*(x42)))+(((x27)*(x29)*(x44)))+(((IkReal(-1.00000000000000))*(x31)*(x32)))+(((x28)*(x38)*(x44)))+(((IkReal(-0.380000000000000))*(x47)))+(((IkReal(-0.380000000000000))*(x48)))+(((r01)*(x33)*(x36)))+(((r02)*(x43)))+(((x41)*(x51)))+(((cj1)*(x33)*(x49)))+(((IkReal(-1.00000000000000))*(pp)*(x29)*(x39)))+(((px)*(r01)*(x40)*(x44))));
evalcond[8]=((((IkReal(-1.00000000000000))*(r02)*(x42)))+(((IkReal(-1.00000000000000))*(x29)*(x35)))+(((x29)*(x31)))+(((IkReal(-1.00000000000000))*(x28)*(x38)*(x41)))+(((IkReal(-2.00000000000000))*(r00)*(x36)*(x37)))+(((x29)*(x43)))+(((IkReal(-2.00000000000000))*(px)*(x36)*(x46)))+(((IkReal(0.380000000000000))*(x50)))+(((x44)*(x51)))+(((x38)*(x43)))+(((IkReal(-1.00000000000000))*(sj1)*(x33)*(x50)))+(((IkReal(0.380000000000000))*(x49)))+(((IkReal(-1.00000000000000))*(x35)*(x38)))+(((IkReal(-1.00000000000000))*(cj1)*(pp)*(x32)))+(((x31)*(x38)))+(((IkReal(-1.00000000000000))*(r02)*(sj0)*(x33)*(x36)))+(((cj1)*(x33)*(x47)))+(((cj1)*(x33)*(x48)))+(((IkReal(-1.00000000000000))*(x27)*(x29)*(x41))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x52=((IkReal(7.40469379642548))*(cj1));
cj3array[0]=((IkReal(-0.337072573793619))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x52)))+(((IkReal(-7.40469379642548))*(pz)*(sj1)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x52)))+(((IkReal(19.4860363063828))*(pp))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x53=((px)*(sj0));
IkReal x54=((IkReal(2.00000000000000))*(py));
IkReal x55=((cj0)*(r01));
IkReal x56=((pz)*(r02));
IkReal x57=((r00)*(sj0));
IkReal x58=((IkReal(0.380000000000000))*(cj1));
IkReal x59=((IkReal(0.380000000000000))*(r02)*(sj1));
IkReal x60=((IkReal(0.380000000000000))*(pz)*(sj1));
evalcond[0]=((IkReal(-0.0533981600000000))+(((r01)*(x53)*(x54)))+(((IkReal(-1.00000000000000))*(x53)*(x59)))+(((pp)*(x55)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(r00)*(x54)))+(((IkReal(0.0361000000000000))*(x55)))+(((IkReal(-1.00000000000000))*(pp)*(x57)))+(((IkReal(2.00000000000000))*(px)*(r00)*(x53)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x58)))+(((IkReal(2.00000000000000))*(x53)*(x56)))+(((IkReal(-1.00000000000000))*(py)*(x54)*(x55)))+(((cj0)*(py)*(x59)))+(((IkReal(-1.00000000000000))*(x55)*(x60)))+(((IkReal(-0.0513188000000000))*(IKcos(j3))))+(((x57)*(x60)))+(((py)*(r00)*(x58)))+(((IkReal(-0.0361000000000000))*(x57)))+(((IkReal(-1.00000000000000))*(cj0)*(x54)*(x56))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((IkReal(-483025.000000000))+(((IkReal(-1282970.00000000))*(cj3)))+(((IkReal(-851929.000000000))*((sj3)*(sj3))))+(((IkReal(-851929.000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-1.76373686662181))*((cj3)*(cj3))))+(((IkReal(-1.76373686662181))*((sj3)*(sj3))))+(((IkReal(-2.65611510791367))*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((IkReal(-483025.000000000))+(((IkReal(-1282970.00000000))*(cj3)))+(((IkReal(-851929.000000000))*((sj3)*(sj3))))+(((IkReal(-851929.000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-1.76373686662181))*((cj3)*(cj3))))+(((IkReal(-1.76373686662181))*((sj3)*(sj3))))+(((IkReal(-2.65611510791367))*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x61=((IkReal(4615000.00000000))*(px));
IkReal x62=((sj1)*(sj3));
IkReal x63=((py)*(r02));
IkReal x64=((cj1)*(sj0));
IkReal x65=((IkReal(3475000.00000000))*(px));
IkReal x66=((IkReal(4615000.00000000))*(py));
IkReal x67=((IkReal(4615000.00000000))*(sj3));
IkReal x68=((cj0)*(cj1));
IkReal x69=((pz)*(r01));
IkReal x70=((pz)*(r00));
IkReal x71=((pz)*(sj1));
IkReal x72=((r01)*(sj1));
IkReal x73=((IkReal(4615000.00000000))*(cj3));
IkReal x74=((IkReal(3475000.00000000))*(py));
IkReal x75=((r00)*(sj1));
IkReal x76=((cj3)*(x68));
IkReal x77=((IkReal(3475000.00000000))*(x68));
if( IKabs(((gconst8)*(((((x63)*(x68)*(x73)))+(((cj3)*(x61)*(x72)))+(((IkReal(-1.00000000000000))*(cj3)*(x66)*(x75)))+(((IkReal(-4615000.00000000))*(pz)*(x62)))+(((IkReal(-1.00000000000000))*(cj3)*(r02)*(x61)*(x64)))+(((IkReal(3475000.00000000))*(x64)*(x70)))+(((IkReal(-1.00000000000000))*(sj3)*(x61)*(x68)))+(((IkReal(-1.00000000000000))*(x68)*(x69)*(x73)))+(((IkReal(-1.00000000000000))*(x74)*(x75)))+(((x63)*(x77)))+(((IkReal(-1.00000000000000))*(sj3)*(x64)*(x66)))+(((IkReal(-1.00000000000000))*(x69)*(x77)))+(((IkReal(-1.00000000000000))*(r02)*(x64)*(x65)))+(((x64)*(x70)*(x73)))+(((IkReal(876850.000000000))*(sj3)))+(((x65)*(x72))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((IkReal(660250.000000000))+(((IkReal(-1.00000000000000))*(r01)*(x61)*(x62)))+(((r02)*(sj3)*(x61)*(x64)))+(((IkReal(-1.00000000000000))*(x63)*(x67)*(x68)))+(((IkReal(876850.000000000))*(cj3)))+(((r00)*(x62)*(x66)))+(((IkReal(-3475000.00000000))*(x71)))+(((IkReal(-1.00000000000000))*(x61)*(x76)))+(((IkReal(-1.00000000000000))*(x71)*(x73)))+(((IkReal(-1.00000000000000))*(x65)*(x68)))+(((IkReal(-1.00000000000000))*(x64)*(x67)*(x70)))+(((IkReal(-1.00000000000000))*(cj3)*(x64)*(x66)))+(((IkReal(-1.00000000000000))*(x64)*(x74)))+(((x67)*(x68)*(x69))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst8)*(((((x63)*(x68)*(x73)))+(((cj3)*(x61)*(x72)))+(((IkReal(-1.00000000000000))*(cj3)*(x66)*(x75)))+(((IkReal(-4615000.00000000))*(pz)*(x62)))+(((IkReal(-1.00000000000000))*(cj3)*(r02)*(x61)*(x64)))+(((IkReal(3475000.00000000))*(x64)*(x70)))+(((IkReal(-1.00000000000000))*(sj3)*(x61)*(x68)))+(((IkReal(-1.00000000000000))*(x68)*(x69)*(x73)))+(((IkReal(-1.00000000000000))*(x74)*(x75)))+(((x63)*(x77)))+(((IkReal(-1.00000000000000))*(sj3)*(x64)*(x66)))+(((IkReal(-1.00000000000000))*(x69)*(x77)))+(((IkReal(-1.00000000000000))*(r02)*(x64)*(x65)))+(((x64)*(x70)*(x73)))+(((IkReal(876850.000000000))*(sj3)))+(((x65)*(x72)))))), ((gconst8)*(((IkReal(660250.000000000))+(((IkReal(-1.00000000000000))*(r01)*(x61)*(x62)))+(((r02)*(sj3)*(x61)*(x64)))+(((IkReal(-1.00000000000000))*(x63)*(x67)*(x68)))+(((IkReal(876850.000000000))*(cj3)))+(((r00)*(x62)*(x66)))+(((IkReal(-3475000.00000000))*(x71)))+(((IkReal(-1.00000000000000))*(x61)*(x76)))+(((IkReal(-1.00000000000000))*(x71)*(x73)))+(((IkReal(-1.00000000000000))*(x65)*(x68)))+(((IkReal(-1.00000000000000))*(x64)*(x67)*(x70)))+(((IkReal(-1.00000000000000))*(cj3)*(x64)*(x66)))+(((IkReal(-1.00000000000000))*(x64)*(x74)))+(((x67)*(x68)*(x69)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x78=IKsin(j2);
IkReal x79=IKcos(j2);
IkReal x80=((px)*(sj1));
IkReal x81=((py)*(sj1));
IkReal x82=((IkReal(1.00000000000000))*(r00));
IkReal x83=((cj1)*(sj0));
IkReal x84=((IkReal(1.00000000000000))*(px));
IkReal x85=((IkReal(1.00000000000000))*(pz));
IkReal x86=((cj0)*(r01));
IkReal x87=((pz)*(sj1));
IkReal x88=((cj0)*(cj1));
IkReal x89=((IkReal(0.139000000000000))*(x78));
IkReal x90=((IkReal(0.139000000000000))*(x79));
IkReal x91=((IkReal(0.184600000000000))*(x78));
IkReal x92=((IkReal(0.184600000000000))*(x79));
IkReal x93=((cj3)*(x91));
IkReal x94=((sj3)*(x92));
IkReal x95=((sj3)*(x91));
IkReal x96=((cj3)*(x92));
IkReal x97=((x89)+(x93));
IkReal x98=((x90)+(x95)+(x96));
evalcond[0]=((((cj0)*(x80)))+(((sj0)*(x81)))+(x97)+(((IkReal(-1.00000000000000))*(cj1)*(x85)))+(((IkReal(-1.00000000000000))*(x94))));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x85)))+(((IkReal(-1.00000000000000))*(py)*(x83)))+(x98)+(((IkReal(-1.00000000000000))*(x84)*(x88))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x81)*(x82)))+(((IkReal(-1.00000000000000))*(r02)*(x83)*(x84)))+(((r01)*(x80)))+(((pz)*(r00)*(x83)))+(x97)+(((IkReal(-1.00000000000000))*(x94)))+(((py)*(r02)*(x88)))+(((IkReal(-1.00000000000000))*(cj1)*(x85)*(x86))));
evalcond[3]=((((IkReal(-0.190000000000000))*(x86)))+(((IkReal(-1.00000000000000))*(sj0)*(x82)*(x87)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x81)))+(((x86)*(x87)))+(((r02)*(sj0)*(x80)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x82)))+(((IkReal(-1.00000000000000))*(x98)))+(((cj1)*(px)*(r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x99=((IkReal(4615000.00000000))*(cj3));
IkReal x100=((py)*(sj0));
IkReal x101=((cj1)*(pz));
IkReal x102=((IkReal(4615000.00000000))*(sj3));
IkReal x103=((IkReal(3475000.00000000))*(sj1));
IkReal x104=((pz)*(sj1));
IkReal x105=((cj0)*(cj1)*(px));
IkReal x106=((cj0)*(px)*(sj1));
if( IKabs(((gconst7)*(((((sj1)*(x100)*(x99)))+(((x106)*(x99)))+(((IkReal(-3475000.00000000))*(x101)))+(((IkReal(-1.00000000000000))*(x101)*(x99)))+(((cj0)*(px)*(x103)))+(((IkReal(-1.00000000000000))*(x102)*(x104)))+(((IkReal(-1.00000000000000))*(x102)*(x105)))+(((IkReal(876850.000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(x100)*(x102)))+(((x100)*(x103))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((IkReal(660250.000000000))+(((IkReal(-1.00000000000000))*(pz)*(x103)))+(((IkReal(876850.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(sj1)*(x100)*(x102)))+(((IkReal(-3475000.00000000))*(cj1)*(x100)))+(((IkReal(-1.00000000000000))*(x105)*(x99)))+(((IkReal(-3475000.00000000))*(x105)))+(((IkReal(-1.00000000000000))*(cj1)*(x100)*(x99)))+(((IkReal(-1.00000000000000))*(x102)*(x106)))+(((x101)*(x102)))+(((IkReal(-1.00000000000000))*(x104)*(x99))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst7)*(((((sj1)*(x100)*(x99)))+(((x106)*(x99)))+(((IkReal(-3475000.00000000))*(x101)))+(((IkReal(-1.00000000000000))*(x101)*(x99)))+(((cj0)*(px)*(x103)))+(((IkReal(-1.00000000000000))*(x102)*(x104)))+(((IkReal(-1.00000000000000))*(x102)*(x105)))+(((IkReal(876850.000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(x100)*(x102)))+(((x100)*(x103)))))), ((gconst7)*(((IkReal(660250.000000000))+(((IkReal(-1.00000000000000))*(pz)*(x103)))+(((IkReal(876850.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(sj1)*(x100)*(x102)))+(((IkReal(-3475000.00000000))*(cj1)*(x100)))+(((IkReal(-1.00000000000000))*(x105)*(x99)))+(((IkReal(-3475000.00000000))*(x105)))+(((IkReal(-1.00000000000000))*(cj1)*(x100)*(x99)))+(((IkReal(-1.00000000000000))*(x102)*(x106)))+(((x101)*(x102)))+(((IkReal(-1.00000000000000))*(x104)*(x99)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x107=IKsin(j2);
IkReal x108=IKcos(j2);
IkReal x109=((px)*(sj1));
IkReal x110=((py)*(sj1));
IkReal x111=((IkReal(1.00000000000000))*(r00));
IkReal x112=((cj1)*(sj0));
IkReal x113=((IkReal(1.00000000000000))*(px));
IkReal x114=((IkReal(1.00000000000000))*(pz));
IkReal x115=((cj0)*(r01));
IkReal x116=((pz)*(sj1));
IkReal x117=((cj0)*(cj1));
IkReal x118=((IkReal(0.139000000000000))*(x107));
IkReal x119=((IkReal(0.139000000000000))*(x108));
IkReal x120=((IkReal(0.184600000000000))*(x107));
IkReal x121=((IkReal(0.184600000000000))*(x108));
IkReal x122=((cj3)*(x120));
IkReal x123=((sj3)*(x121));
IkReal x124=((sj3)*(x120));
IkReal x125=((cj3)*(x121));
IkReal x126=((x122)+(x118));
IkReal x127=((x124)+(x125)+(x119));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj1)*(x114)))+(((sj0)*(x110)))+(((IkReal(-1.00000000000000))*(x123)))+(x126)+(((cj0)*(x109))));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x114)))+(((IkReal(-1.00000000000000))*(x113)*(x117)))+(x127)+(((IkReal(-1.00000000000000))*(py)*(x112))));
evalcond[2]=((((pz)*(r00)*(x112)))+(((py)*(r02)*(x117)))+(((IkReal(-1.00000000000000))*(r02)*(x112)*(x113)))+(((IkReal(-1.00000000000000))*(x110)*(x111)))+(((IkReal(-1.00000000000000))*(x123)))+(x126)+(((r01)*(x109)))+(((IkReal(-1.00000000000000))*(cj1)*(x114)*(x115))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj0)*(x111)*(x116)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x111)))+(((IkReal(-1.00000000000000))*(x127)))+(((IkReal(-0.190000000000000))*(x115)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((r02)*(sj0)*(x109)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x110)))+(((x115)*(x116)))+(((cj1)*(px)*(r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
IkReal x128=(pz)*(pz);
IkReal x129=(py)*(py);
IkReal x130=(px)*(px);
IkReal x131=((r01)*(sj0));
IkReal x132=((IkReal(0.190000000000000))*(cj1));
IkReal x133=((pp)*(sj1));
IkReal x134=((IkReal(1.00000000000000))*(r02));
IkReal x135=((IkReal(2.00000000000000))*(pz));
IkReal x136=((IkReal(1.00000000000000))*(pz));
IkReal x137=((IkReal(0.380000000000000))*(pz));
IkReal x138=((py)*(sj1));
IkReal x139=((px)*(sj0));
IkReal x140=((cj0)*(r00));
IkReal x141=((IkReal(1.00000000000000))*(cj1));
IkReal x142=((cj0)*(py));
IkReal x143=((IkReal(2.00000000000000))*(sj1));
IkReal x144=((IkReal(0.0361000000000000))*(cj1));
IkReal x145=((IkReal(0.0361000000000000))*(sj1));
IkReal x146=((IkReal(2.00000000000000))*(cj1));
IkReal x147=((IkReal(0.190000000000000))*(sj1));
IkReal x148=((cj0)*(r01));
IkReal x149=((py)*(r01));
IkReal x150=((px)*(r00));
IkReal x151=((py)*(r02)*(sj0));
IkReal x152=((cj0)*(px)*(r02));
IkReal x153=((r02)*(x128));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((x142)+(((IkReal(-1.00000000000000))*(x139))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(x148));
evalcond[3]=((((sj1)*(x140)))+(((sj1)*(x131)))+(((IkReal(-1.00000000000000))*(cj1)*(x134))));
evalcond[4]=((((IkReal(-1.00000000000000))*(pz)*(x134)))+(((x131)*(x132)))+(((IkReal(-1.00000000000000))*(x150)))+(((IkReal(-1.00000000000000))*(x149)))+(((r02)*(x147)))+(((x132)*(x140))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x131)*(x141)))+(((IkReal(-1.00000000000000))*(x140)*(x141)))+(((IkReal(-1.00000000000000))*(sj1)*(x134))));
evalcond[6]=((((x140)*(x147)))+(((x131)*(x147)))+(x152)+(x151)+(((IkReal(-1.00000000000000))*(r02)*(x132)))+(((IkReal(-1.00000000000000))*(x131)*(x136)))+(((IkReal(-1.00000000000000))*(x136)*(x140))));
evalcond[7]=((((x140)*(x144)))+(((x131)*(x144)))+(((py)*(r00)*(x139)*(x146)))+(((sj1)*(x135)*(x150)))+(((x130)*(x140)*(x146)))+(((IkReal(-1.00000000000000))*(pp)*(x140)*(x141)))+(((r01)*(x135)*(x138)))+(((IkReal(-1.00000000000000))*(x133)*(x134)))+(((px)*(r01)*(x142)*(x146)))+(((IkReal(-1.00000000000000))*(r02)*(x137)))+(((IkReal(-0.380000000000000))*(x149)))+(((IkReal(-0.380000000000000))*(x150)))+(((x129)*(x131)*(x146)))+(((cj1)*(x135)*(x152)))+(((cj1)*(x135)*(x151)))+(((r02)*(x145)))+(((IkReal(-1.00000000000000))*(pp)*(x131)*(x141)))+(((x143)*(x153))));
evalcond[8]=((((IkReal(-1.00000000000000))*(cj1)*(pp)*(x134)))+(((x140)*(x145)))+(((x131)*(x145)))+(((IkReal(-1.00000000000000))*(x137)*(x140)))+(((IkReal(0.380000000000000))*(x151)))+(((IkReal(0.380000000000000))*(x152)))+(((IkReal(-1.00000000000000))*(x130)*(x140)*(x143)))+(((IkReal(-1.00000000000000))*(r02)*(x144)))+(((x131)*(x133)))+(((x146)*(x153)))+(((IkReal(-1.00000000000000))*(sj1)*(x135)*(x152)))+(((IkReal(-1.00000000000000))*(x129)*(x131)*(x143)))+(((IkReal(-2.00000000000000))*(r00)*(x138)*(x139)))+(((cj1)*(x135)*(x150)))+(((IkReal(-2.00000000000000))*(px)*(x138)*(x148)))+(((cj1)*(x135)*(x149)))+(((x133)*(x140)))+(((IkReal(-1.00000000000000))*(r02)*(sj0)*(x135)*(x138)))+(((IkReal(-1.00000000000000))*(x131)*(x137))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x154=((IkReal(7.40469379642548))*(cj1));
cj3array[0]=((IkReal(-0.337072573793619))+(((IkReal(-7.40469379642548))*(pz)*(sj1)))+(((IkReal(19.4860363063828))*(pp)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x154)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x154))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x155=((px)*(sj0));
IkReal x156=((IkReal(2.00000000000000))*(py));
IkReal x157=((cj0)*(r01));
IkReal x158=((pz)*(r02));
IkReal x159=((r00)*(sj0));
IkReal x160=((IkReal(0.380000000000000))*(cj1));
IkReal x161=((IkReal(0.380000000000000))*(r02)*(sj1));
IkReal x162=((IkReal(0.380000000000000))*(pz)*(sj1));
evalcond[0]=((IkReal(0.0533981600000000))+(((IkReal(-1.00000000000000))*(x157)*(x162)))+(((IkReal(-0.0361000000000000))*(x159)))+(((IkReal(-1.00000000000000))*(cj0)*(x156)*(x158)))+(((cj0)*(py)*(x161)))+(((IkReal(2.00000000000000))*(px)*(r00)*(x155)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(r00)*(x156)))+(((IkReal(0.0513188000000000))*(IKcos(j3))))+(((IkReal(-1.00000000000000))*(pp)*(x159)))+(((IkReal(-1.00000000000000))*(py)*(x156)*(x157)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x160)))+(((py)*(r00)*(x160)))+(((r01)*(x155)*(x156)))+(((IkReal(-1.00000000000000))*(x155)*(x161)))+(((x159)*(x162)))+(((pp)*(x157)))+(((IkReal(0.0361000000000000))*(x157)))+(((IkReal(2.00000000000000))*(x155)*(x158))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((IkReal(-483025.000000000))+(((IkReal(-1282970.00000000))*(cj3)))+(((IkReal(-851929.000000000))*((sj3)*(sj3))))+(((IkReal(-851929.000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-1.76373686662181))*((cj3)*(cj3))))+(((IkReal(-1.76373686662181))*((sj3)*(sj3))))+(((IkReal(-2.65611510791367))*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((IkReal(-483025.000000000))+(((IkReal(-1282970.00000000))*(cj3)))+(((IkReal(-851929.000000000))*((sj3)*(sj3))))+(((IkReal(-851929.000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-1.76373686662181))*((cj3)*(cj3))))+(((IkReal(-1.76373686662181))*((sj3)*(sj3))))+(((IkReal(-2.65611510791367))*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x163=((IkReal(4615000.00000000))*(px));
IkReal x164=((sj1)*(sj3));
IkReal x165=((py)*(r02));
IkReal x166=((cj1)*(sj0));
IkReal x167=((IkReal(3475000.00000000))*(px));
IkReal x168=((IkReal(4615000.00000000))*(py));
IkReal x169=((pz)*(r01));
IkReal x170=((IkReal(3475000.00000000))*(pz));
IkReal x171=((IkReal(4615000.00000000))*(pz));
IkReal x172=((r01)*(sj1));
IkReal x173=((cj3)*(r00));
IkReal x174=((IkReal(3475000.00000000))*(py));
IkReal x175=((cj0)*(cj1)*(cj3));
IkReal x176=((IkReal(3475000.00000000))*(cj0)*(cj1));
IkReal x177=((IkReal(4615000.00000000))*(cj0)*(cj1)*(sj3));
if( IKabs(((gconst10)*(((((cj3)*(r02)*(x163)*(x166)))+(((IkReal(-1.00000000000000))*(r00)*(x166)*(x170)))+(((sj1)*(x168)*(x173)))+(((IkReal(-1.00000000000000))*(x166)*(x171)*(x173)))+(((x169)*(x176)))+(((IkReal(-1.00000000000000))*(cj3)*(x163)*(x172)))+(((IkReal(4615000.00000000))*(x169)*(x175)))+(((IkReal(-1.00000000000000))*(sj3)*(x166)*(x168)))+(((IkReal(-1.00000000000000))*(cj0)*(cj1)*(sj3)*(x163)))+(((IkReal(-4615000.00000000))*(x165)*(x175)))+(((r00)*(sj1)*(x174)))+(((IkReal(-1.00000000000000))*(x164)*(x171)))+(((r02)*(x166)*(x167)))+(((IkReal(876850.000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x167)*(x172)))+(((IkReal(-1.00000000000000))*(x165)*(x176))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((IkReal(660250.000000000))+(((IkReal(-1.00000000000000))*(x163)*(x175)))+(((IkReal(876850.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj0)*(cj1)*(x167)))+(((x165)*(x177)))+(((r01)*(x163)*(x164)))+(((IkReal(-1.00000000000000))*(r00)*(x164)*(x168)))+(((r00)*(sj3)*(x166)*(x171)))+(((IkReal(-1.00000000000000))*(r02)*(sj3)*(x163)*(x166)))+(((IkReal(-1.00000000000000))*(x169)*(x177)))+(((IkReal(-1.00000000000000))*(cj3)*(x166)*(x168)))+(((IkReal(-1.00000000000000))*(sj1)*(x170)))+(((IkReal(-1.00000000000000))*(x166)*(x174)))+(((IkReal(-1.00000000000000))*(cj3)*(sj1)*(x171))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst10)*(((((cj3)*(r02)*(x163)*(x166)))+(((IkReal(-1.00000000000000))*(r00)*(x166)*(x170)))+(((sj1)*(x168)*(x173)))+(((IkReal(-1.00000000000000))*(x166)*(x171)*(x173)))+(((x169)*(x176)))+(((IkReal(-1.00000000000000))*(cj3)*(x163)*(x172)))+(((IkReal(4615000.00000000))*(x169)*(x175)))+(((IkReal(-1.00000000000000))*(sj3)*(x166)*(x168)))+(((IkReal(-1.00000000000000))*(cj0)*(cj1)*(sj3)*(x163)))+(((IkReal(-4615000.00000000))*(x165)*(x175)))+(((r00)*(sj1)*(x174)))+(((IkReal(-1.00000000000000))*(x164)*(x171)))+(((r02)*(x166)*(x167)))+(((IkReal(876850.000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x167)*(x172)))+(((IkReal(-1.00000000000000))*(x165)*(x176)))))), ((gconst10)*(((IkReal(660250.000000000))+(((IkReal(-1.00000000000000))*(x163)*(x175)))+(((IkReal(876850.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj0)*(cj1)*(x167)))+(((x165)*(x177)))+(((r01)*(x163)*(x164)))+(((IkReal(-1.00000000000000))*(r00)*(x164)*(x168)))+(((r00)*(sj3)*(x166)*(x171)))+(((IkReal(-1.00000000000000))*(r02)*(sj3)*(x163)*(x166)))+(((IkReal(-1.00000000000000))*(x169)*(x177)))+(((IkReal(-1.00000000000000))*(cj3)*(x166)*(x168)))+(((IkReal(-1.00000000000000))*(sj1)*(x170)))+(((IkReal(-1.00000000000000))*(x166)*(x174)))+(((IkReal(-1.00000000000000))*(cj3)*(sj1)*(x171)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x178=IKsin(j2);
IkReal x179=IKcos(j2);
IkReal x180=((px)*(sj1));
IkReal x181=((py)*(sj1));
IkReal x182=((IkReal(1.00000000000000))*(r00));
IkReal x183=((cj1)*(sj0));
IkReal x184=((IkReal(1.00000000000000))*(px));
IkReal x185=((IkReal(1.00000000000000))*(pz));
IkReal x186=((cj0)*(r01));
IkReal x187=((pz)*(sj1));
IkReal x188=((cj0)*(cj1));
IkReal x189=((IkReal(0.139000000000000))*(x178));
IkReal x190=((IkReal(0.139000000000000))*(x179));
IkReal x191=((IkReal(0.184600000000000))*(x178));
IkReal x192=((IkReal(0.184600000000000))*(x179));
IkReal x193=((sj3)*(x192));
IkReal x194=((cj3)*(x191));
IkReal x195=((sj3)*(x191));
IkReal x196=((cj3)*(x192));
IkReal x197=((x194)+(x189));
IkReal x198=((x190)+(x196)+(x195));
evalcond[0]=((((cj0)*(x180)))+(((sj0)*(x181)))+(((IkReal(-1.00000000000000))*(x193)))+(x197)+(((IkReal(-1.00000000000000))*(cj1)*(x185))));
evalcond[1]=((IkReal(0.190000000000000))+(x198)+(((IkReal(-1.00000000000000))*(py)*(x183)))+(((IkReal(-1.00000000000000))*(x184)*(x188)))+(((IkReal(-1.00000000000000))*(sj1)*(x185))));
evalcond[2]=((((r01)*(x180)))+(((IkReal(-1.00000000000000))*(cj1)*(x185)*(x186)))+(((IkReal(-1.00000000000000))*(x197)))+(((IkReal(-1.00000000000000))*(r02)*(x183)*(x184)))+(x193)+(((py)*(r02)*(x188)))+(((pz)*(r00)*(x183)))+(((IkReal(-1.00000000000000))*(x181)*(x182))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj1)*(py)*(x182)))+(((x186)*(x187)))+(((IkReal(-1.00000000000000))*(sj0)*(x182)*(x187)))+(((IkReal(-0.190000000000000))*(x186)))+(x198)+(((r02)*(sj0)*(x180)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x181)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((cj1)*(px)*(r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x199=((IkReal(4615000.00000000))*(cj3));
IkReal x200=((py)*(sj0));
IkReal x201=((cj1)*(pz));
IkReal x202=((IkReal(4615000.00000000))*(sj3));
IkReal x203=((IkReal(3475000.00000000))*(sj1));
IkReal x204=((pz)*(sj1));
IkReal x205=((cj0)*(cj1)*(px));
IkReal x206=((cj0)*(px)*(sj1));
if( IKabs(((gconst9)*(((((x200)*(x203)))+(((IkReal(-1.00000000000000))*(x202)*(x204)))+(((IkReal(-1.00000000000000))*(x202)*(x205)))+(((IkReal(-3475000.00000000))*(x201)))+(((cj0)*(px)*(x203)))+(((IkReal(-1.00000000000000))*(cj1)*(x200)*(x202)))+(((IkReal(-1.00000000000000))*(x199)*(x201)))+(((sj1)*(x199)*(x200)))+(((IkReal(876850.000000000))*(sj3)))+(((x199)*(x206))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((IkReal(660250.000000000))+(((x201)*(x202)))+(((IkReal(-1.00000000000000))*(pz)*(x203)))+(((IkReal(876850.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x202)*(x206)))+(((IkReal(-3475000.00000000))*(x205)))+(((IkReal(-1.00000000000000))*(cj1)*(x199)*(x200)))+(((IkReal(-3475000.00000000))*(cj1)*(x200)))+(((IkReal(-1.00000000000000))*(x199)*(x205)))+(((IkReal(-1.00000000000000))*(x199)*(x204)))+(((IkReal(-1.00000000000000))*(sj1)*(x200)*(x202))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst9)*(((((x200)*(x203)))+(((IkReal(-1.00000000000000))*(x202)*(x204)))+(((IkReal(-1.00000000000000))*(x202)*(x205)))+(((IkReal(-3475000.00000000))*(x201)))+(((cj0)*(px)*(x203)))+(((IkReal(-1.00000000000000))*(cj1)*(x200)*(x202)))+(((IkReal(-1.00000000000000))*(x199)*(x201)))+(((sj1)*(x199)*(x200)))+(((IkReal(876850.000000000))*(sj3)))+(((x199)*(x206)))))), ((gconst9)*(((IkReal(660250.000000000))+(((x201)*(x202)))+(((IkReal(-1.00000000000000))*(pz)*(x203)))+(((IkReal(876850.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x202)*(x206)))+(((IkReal(-3475000.00000000))*(x205)))+(((IkReal(-1.00000000000000))*(cj1)*(x199)*(x200)))+(((IkReal(-3475000.00000000))*(cj1)*(x200)))+(((IkReal(-1.00000000000000))*(x199)*(x205)))+(((IkReal(-1.00000000000000))*(x199)*(x204)))+(((IkReal(-1.00000000000000))*(sj1)*(x200)*(x202)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x207=IKsin(j2);
IkReal x208=IKcos(j2);
IkReal x209=((px)*(sj1));
IkReal x210=((py)*(sj1));
IkReal x211=((IkReal(1.00000000000000))*(r00));
IkReal x212=((cj1)*(sj0));
IkReal x213=((IkReal(1.00000000000000))*(px));
IkReal x214=((IkReal(1.00000000000000))*(pz));
IkReal x215=((cj0)*(r01));
IkReal x216=((pz)*(sj1));
IkReal x217=((cj0)*(cj1));
IkReal x218=((IkReal(0.139000000000000))*(x207));
IkReal x219=((IkReal(0.139000000000000))*(x208));
IkReal x220=((IkReal(0.184600000000000))*(x207));
IkReal x221=((IkReal(0.184600000000000))*(x208));
IkReal x222=((sj3)*(x221));
IkReal x223=((cj3)*(x220));
IkReal x224=((sj3)*(x220));
IkReal x225=((cj3)*(x221));
IkReal x226=((x218)+(x223));
IkReal x227=((x219)+(x225)+(x224));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj1)*(x214)))+(x226)+(((sj0)*(x210)))+(((cj0)*(x209)))+(((IkReal(-1.00000000000000))*(x222))));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(py)*(x212)))+(((IkReal(-1.00000000000000))*(sj1)*(x214)))+(x227)+(((IkReal(-1.00000000000000))*(x213)*(x217))));
evalcond[2]=((((py)*(r02)*(x217)))+(((r01)*(x209)))+(x222)+(((IkReal(-1.00000000000000))*(x210)*(x211)))+(((IkReal(-1.00000000000000))*(r02)*(x212)*(x213)))+(((IkReal(-1.00000000000000))*(cj1)*(x214)*(x215)))+(((pz)*(r00)*(x212)))+(((IkReal(-1.00000000000000))*(x226))));
evalcond[3]=((((IkReal(-0.190000000000000))*(x215)))+(((x215)*(x216)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x210)))+(x227)+(((IkReal(-1.00000000000000))*(sj0)*(x211)*(x216)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x211)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((r02)*(sj0)*(x209)))+(((cj1)*(px)*(r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x228=((IkReal(7.40469379642548))*(cj1));
IkReal x229=((IkReal(190.000000000000))*(cj1));
if( IKabs(((IkReal(0.00719424460431655))*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x229)))+(((IkReal(1000.00000000000))*(pz)*(r02)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x229)))+(((IkReal(1000.00000000000))*(py)*(r01)))+(((IkReal(-190.000000000000))*(r02)*(sj1)))+(((IkReal(1000.00000000000))*(px)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.337072573793619))+(((IkReal(-7.40469379642548))*(pz)*(sj1)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x228)))+(((IkReal(19.4860363063828))*(pp)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x228))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00719424460431655))*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x229)))+(((IkReal(1000.00000000000))*(pz)*(r02)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x229)))+(((IkReal(1000.00000000000))*(py)*(r01)))+(((IkReal(-190.000000000000))*(r02)*(sj1)))+(((IkReal(1000.00000000000))*(px)*(r00)))))))+IKsqr(((IkReal(-0.337072573793619))+(((IkReal(-7.40469379642548))*(pz)*(sj1)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x228)))+(((IkReal(19.4860363063828))*(pp)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x228)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((IkReal(0.00719424460431655))*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x229)))+(((IkReal(1000.00000000000))*(pz)*(r02)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x229)))+(((IkReal(1000.00000000000))*(py)*(r01)))+(((IkReal(-190.000000000000))*(r02)*(sj1)))+(((IkReal(1000.00000000000))*(px)*(r00)))))), ((IkReal(-0.337072573793619))+(((IkReal(-7.40469379642548))*(pz)*(sj1)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x228)))+(((IkReal(19.4860363063828))*(pp)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x228)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x230=IKcos(j3);
IkReal x231=((r01)*(sj0));
IkReal x232=((IkReal(0.190000000000000))*(cj1));
IkReal x233=((cj0)*(py));
IkReal x234=((px)*(sj0));
IkReal x235=((py)*(sj0));
IkReal x236=((r00)*(sj0));
IkReal x237=((cj0)*(r01));
IkReal x238=((IkReal(1.00000000000000))*(pz));
IkReal x239=((IkReal(1.00000000000000))*(pp));
IkReal x240=((IkReal(0.380000000000000))*(cj1));
IkReal x241=((cj0)*(r00));
IkReal x242=((IkReal(0.190000000000000))*(sj1));
IkReal x243=((IkReal(0.139000000000000))*(cj4));
IkReal x244=((cj0)*(px));
IkReal x245=((IkReal(2.00000000000000))*(px)*(py));
IkReal x246=((IkReal(0.380000000000000))*(r02)*(sj1));
IkReal x247=((IkReal(0.0513188000000000))*(x230));
IkReal x248=((IkReal(0.380000000000000))*(pz)*(sj1));
IkReal x249=((IkReal(2.00000000000000))*(pz)*(r02));
evalcond[0]=((IkReal(0.0172981600000000))+(((x240)*(x244)))+(((IkReal(-1.00000000000000))*(x239)))+(x247)+(x248)+(((x235)*(x240))));
evalcond[1]=((((r02)*(x242)))+(((IkReal(-1.00000000000000))*(px)*(r00)))+(((IkReal(-1.00000000000000))*(r02)*(x238)))+(((x232)*(x241)))+(((x243)*(IKsin(j3))))+(((IkReal(-1.00000000000000))*(py)*(r01)))+(((x231)*(x232))));
evalcond[2]=((((r02)*(x235)))+(((r02)*(x244)))+(((IkReal(-1.00000000000000))*(r02)*(x232)))+(((IkReal(-0.184600000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x230)*(x243)))+(((x231)*(x242)))+(((x241)*(x242)))+(((IkReal(-1.00000000000000))*(x231)*(x238)))+(((IkReal(-1.00000000000000))*(x238)*(x241))));
evalcond[3]=((((IkReal(2.00000000000000))*(px)*(r00)*(x234)))+(((pp)*(x237)))+(((IkReal(-0.0533981600000000))*(sj4)))+(((IkReal(-2.00000000000000))*(py)*(r01)*(x233)))+(((x233)*(x246)))+(((IkReal(-0.0361000000000000))*(x236)))+(((IkReal(0.0361000000000000))*(x237)))+(((x234)*(x249)))+(((IkReal(-1.00000000000000))*(sj4)*(x247)))+(((x236)*(x248)))+(((py)*(r00)*(x240)))+(((IkReal(-1.00000000000000))*(x234)*(x246)))+(((IkReal(-1.00000000000000))*(x237)*(x248)))+(((IkReal(-1.00000000000000))*(x233)*(x249)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x240)))+(((x231)*(x245)))+(((IkReal(-1.00000000000000))*(x236)*(x239)))+(((IkReal(-2.00000000000000))*(px)*(r00)*(x233))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3))))));
dummyeval[0]=((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
IkReal x250=((IkReal(923.000000000000))*(cj4));
gconst2=IKsign(((((IkReal(695.000000000000))*(cj3)*(cj4)))+(((x250)*((cj3)*(cj3))))+(((x250)*((sj3)*(sj3))))));
IkReal x251=((IkReal(1.32805755395683))*(cj4));
dummyeval[0]=((((cj3)*(cj4)))+(((x251)*((sj3)*(sj3))))+(((x251)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x252=((IkReal(0.0513188000000000))*(cj3));
IkReal x253=(py)*(py);
IkReal x254=(px)*(px);
IkReal x255=(pz)*(pz);
IkReal x256=((r01)*(sj0));
IkReal x257=((IkReal(2.00000000000000))*(py));
IkReal x258=((IkReal(0.190000000000000))*(cj1));
IkReal x259=((cj0)*(py));
IkReal x260=((px)*(sj0));
IkReal x261=((r02)*(sj0));
IkReal x262=((pp)*(sj1));
IkReal x263=((cj1)*(pz));
IkReal x264=((r00)*(sj0));
IkReal x265=((cj0)*(r01));
IkReal x266=((IkReal(1.00000000000000))*(r02));
IkReal x267=((r00)*(sj1));
IkReal x268=((IkReal(0.380000000000000))*(pz));
IkReal x269=((px)*(sj1));
IkReal x270=((IkReal(0.380000000000000))*(cj1));
IkReal x271=((pz)*(sj1));
IkReal x272=((IkReal(1.00000000000000))*(pp));
IkReal x273=((IkReal(0.0361000000000000))*(sj1));
IkReal x274=((cj0)*(r00));
IkReal x275=((IkReal(0.380000000000000))*(py));
IkReal x276=((IkReal(0.190000000000000))*(sj1));
IkReal x277=((cj0)*(px));
IkReal x278=((cj1)*(r02));
IkReal x279=((pz)*(r02));
IkReal x280=((IkReal(1.00000000000000))*(pz));
IkReal x281=((IkReal(2.00000000000000))*(px));
IkReal x282=((px)*(r00));
IkReal x283=((IkReal(0.380000000000000))*(r02)*(sj1));
IkReal x284=((IkReal(2.00000000000000))*(x254));
IkReal x285=((cj1)*(x274));
IkReal x286=((IkReal(2.00000000000000))*(cj0)*(r02));
IkReal x287=((IkReal(2.00000000000000))*(x253));
IkReal x288=((IkReal(2.00000000000000))*(x255));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x260)))+(x259));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x264)))+(x265));
evalcond[3]=((IkReal(0.0172981600000000))+(((py)*(sj0)*(x270)))+(((x270)*(x277)))+(x252)+(((IkReal(-1.00000000000000))*(x272)))+(((sj1)*(x268))));
evalcond[4]=((((cj0)*(x267)))+(((IkReal(-1.00000000000000))*(cj1)*(x266)))+(((sj1)*(x256))));
evalcond[5]=((((r02)*(x276)))+(((x258)*(x274)))+(((x256)*(x258)))+(((IkReal(-1.00000000000000))*(x282)))+(((IkReal(-1.00000000000000))*(py)*(r01)))+(((IkReal(-1.00000000000000))*(pz)*(x266))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj1)*(x256)))+(((IkReal(-1.00000000000000))*(sj1)*(x266)))+(((IkReal(-1.00000000000000))*(x285))));
evalcond[7]=((((r02)*(x277)))+(((IkReal(-1.00000000000000))*(r02)*(x258)))+(((IkReal(0.190000000000000))*(cj0)*(x267)))+(((x256)*(x276)))+(((py)*(x261)))+(((IkReal(-1.00000000000000))*(x256)*(x280)))+(((IkReal(-1.00000000000000))*(x274)*(x280))));
evalcond[8]=((IkReal(-0.0533981600000000))+(((x259)*(x283)))+(((IkReal(2.00000000000000))*(x260)*(x279)))+(((IkReal(-1.00000000000000))*(cj0)*(x257)*(x279)))+(((x264)*(x284)))+(((IkReal(-1.00000000000000))*(x260)*(x283)))+(((py)*(r00)*(x270)))+(((px)*(x256)*(x257)))+(((sj1)*(x264)*(x268)))+(((IkReal(-0.0361000000000000))*(x264)))+(((IkReal(-1.00000000000000))*(px)*(x257)*(x274)))+(((IkReal(0.0361000000000000))*(x265)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x270)))+(((IkReal(-1.00000000000000))*(sj1)*(x265)*(x268)))+(((pp)*(x265)))+(((IkReal(-1.00000000000000))*(x264)*(x272)))+(((IkReal(-1.00000000000000))*(x265)*(x287)))+(((IkReal(-1.00000000000000))*(x252))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x262)*(x266)))+(((IkReal(0.0361000000000000))*(cj1)*(x256)))+(((IkReal(0.0361000000000000))*(x285)))+(((x284)*(x285)))+(((IkReal(2.00000000000000))*(r02)*(x263)*(x277)))+(((cj1)*(px)*(x257)*(x265)))+(((IkReal(-0.380000000000000))*(x282)))+(((r01)*(x257)*(x271)))+(((r02)*(x273)))+(((cj1)*(x256)*(x287)))+(((cj1)*(r00)*(x257)*(x260)))+(((r02)*(sj1)*(x288)))+(((pz)*(x267)*(x281)))+(((IkReal(-1.00000000000000))*(r01)*(x275)))+(((x257)*(x261)*(x263)))+(((IkReal(-1.00000000000000))*(r02)*(x268)))+(((IkReal(-1.00000000000000))*(x272)*(x285)))+(((IkReal(-1.00000000000000))*(cj1)*(x256)*(x272))));
evalcond[10]=((((IkReal(0.0361000000000000))*(cj0)*(x267)))+(((x278)*(x288)))+(((IkReal(-1.00000000000000))*(x257)*(x265)*(x269)))+(((r01)*(x257)*(x263)))+(((IkReal(-2.00000000000000))*(cj0)*(x269)*(x279)))+(((x262)*(x274)))+(((IkReal(-1.00000000000000))*(cj0)*(x267)*(x284)))+(((IkReal(-1.00000000000000))*(sj1)*(x256)*(x287)))+(((IkReal(-1.00000000000000))*(cj1)*(pp)*(x266)))+(((IkReal(-1.00000000000000))*(x257)*(x261)*(x271)))+(((IkReal(-0.0361000000000000))*(x278)))+(((IkReal(-1.00000000000000))*(x257)*(x260)*(x267)))+(((IkReal(-1.00000000000000))*(x268)*(x274)))+(((x256)*(x262)))+(((x256)*(x273)))+(((IkReal(0.380000000000000))*(r02)*(x277)))+(((IkReal(-1.00000000000000))*(x256)*(x268)))+(((x261)*(x275)))+(((r00)*(x263)*(x281))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((IkReal(-483025.000000000))+(((IkReal(-1282970.00000000))*(cj3)))+(((IkReal(-851929.000000000))*((sj3)*(sj3))))+(((IkReal(-851929.000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-1.76373686662181))*((cj3)*(cj3))))+(((IkReal(-1.76373686662181))*((sj3)*(sj3))))+(((IkReal(-2.65611510791367))*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((IkReal(-483025.000000000))+(((IkReal(-1282970.00000000))*(cj3)))+(((IkReal(-851929.000000000))*((sj3)*(sj3))))+(((IkReal(-851929.000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-1.76373686662181))*((cj3)*(cj3))))+(((IkReal(-1.76373686662181))*((sj3)*(sj3))))+(((IkReal(-2.65611510791367))*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x289=((IkReal(4615000.00000000))*(px));
IkReal x290=((sj1)*(sj3));
IkReal x291=((py)*(r02));
IkReal x292=((cj1)*(sj0));
IkReal x293=((IkReal(3475000.00000000))*(px));
IkReal x294=((IkReal(4615000.00000000))*(py));
IkReal x295=((IkReal(4615000.00000000))*(sj3));
IkReal x296=((cj0)*(cj1));
IkReal x297=((pz)*(r01));
IkReal x298=((pz)*(r00));
IkReal x299=((pz)*(sj1));
IkReal x300=((r01)*(sj1));
IkReal x301=((IkReal(4615000.00000000))*(cj3));
IkReal x302=((IkReal(3475000.00000000))*(py));
IkReal x303=((r00)*(sj1));
IkReal x304=((cj3)*(x296));
IkReal x305=((IkReal(3475000.00000000))*(x296));
if( IKabs(((gconst4)*(((((IkReal(-1.00000000000000))*(cj3)*(x294)*(x303)))+(((IkReal(-1.00000000000000))*(sj3)*(x289)*(x296)))+(((IkReal(-1.00000000000000))*(cj3)*(r02)*(x289)*(x292)))+(((x291)*(x305)))+(((IkReal(3475000.00000000))*(x292)*(x298)))+(((IkReal(-4615000.00000000))*(pz)*(x290)))+(((x291)*(x296)*(x301)))+(((IkReal(-1.00000000000000))*(x297)*(x305)))+(((IkReal(-1.00000000000000))*(x302)*(x303)))+(((x292)*(x298)*(x301)))+(((IkReal(-1.00000000000000))*(x296)*(x297)*(x301)))+(((x293)*(x300)))+(((cj3)*(x289)*(x300)))+(((IkReal(-1.00000000000000))*(r02)*(x292)*(x293)))+(((IkReal(876850.000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(sj3)*(x292)*(x294))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((IkReal(660250.000000000))+(((IkReal(-1.00000000000000))*(x292)*(x302)))+(((IkReal(-1.00000000000000))*(r01)*(x289)*(x290)))+(((x295)*(x296)*(x297)))+(((IkReal(876850.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x293)*(x296)))+(((IkReal(-3475000.00000000))*(x299)))+(((IkReal(-1.00000000000000))*(x292)*(x295)*(x298)))+(((IkReal(-1.00000000000000))*(x299)*(x301)))+(((r02)*(sj3)*(x289)*(x292)))+(((IkReal(-1.00000000000000))*(cj3)*(x292)*(x294)))+(((IkReal(-1.00000000000000))*(x289)*(x304)))+(((r00)*(x290)*(x294)))+(((IkReal(-1.00000000000000))*(x291)*(x295)*(x296))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst4)*(((((IkReal(-1.00000000000000))*(cj3)*(x294)*(x303)))+(((IkReal(-1.00000000000000))*(sj3)*(x289)*(x296)))+(((IkReal(-1.00000000000000))*(cj3)*(r02)*(x289)*(x292)))+(((x291)*(x305)))+(((IkReal(3475000.00000000))*(x292)*(x298)))+(((IkReal(-4615000.00000000))*(pz)*(x290)))+(((x291)*(x296)*(x301)))+(((IkReal(-1.00000000000000))*(x297)*(x305)))+(((IkReal(-1.00000000000000))*(x302)*(x303)))+(((x292)*(x298)*(x301)))+(((IkReal(-1.00000000000000))*(x296)*(x297)*(x301)))+(((x293)*(x300)))+(((cj3)*(x289)*(x300)))+(((IkReal(-1.00000000000000))*(r02)*(x292)*(x293)))+(((IkReal(876850.000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(sj3)*(x292)*(x294)))))), ((gconst4)*(((IkReal(660250.000000000))+(((IkReal(-1.00000000000000))*(x292)*(x302)))+(((IkReal(-1.00000000000000))*(r01)*(x289)*(x290)))+(((x295)*(x296)*(x297)))+(((IkReal(876850.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x293)*(x296)))+(((IkReal(-3475000.00000000))*(x299)))+(((IkReal(-1.00000000000000))*(x292)*(x295)*(x298)))+(((IkReal(-1.00000000000000))*(x299)*(x301)))+(((r02)*(sj3)*(x289)*(x292)))+(((IkReal(-1.00000000000000))*(cj3)*(x292)*(x294)))+(((IkReal(-1.00000000000000))*(x289)*(x304)))+(((r00)*(x290)*(x294)))+(((IkReal(-1.00000000000000))*(x291)*(x295)*(x296)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x306=IKsin(j2);
IkReal x307=IKcos(j2);
IkReal x308=((px)*(sj1));
IkReal x309=((py)*(sj1));
IkReal x310=((IkReal(1.00000000000000))*(r00));
IkReal x311=((cj1)*(sj0));
IkReal x312=((IkReal(1.00000000000000))*(px));
IkReal x313=((IkReal(1.00000000000000))*(pz));
IkReal x314=((cj0)*(r01));
IkReal x315=((pz)*(sj1));
IkReal x316=((cj0)*(cj1));
IkReal x317=((IkReal(0.139000000000000))*(x306));
IkReal x318=((IkReal(0.139000000000000))*(x307));
IkReal x319=((IkReal(0.184600000000000))*(x306));
IkReal x320=((IkReal(0.184600000000000))*(x307));
IkReal x321=((cj3)*(x319));
IkReal x322=((sj3)*(x320));
IkReal x323=((sj3)*(x319));
IkReal x324=((cj3)*(x320));
IkReal x325=((x321)+(x317));
IkReal x326=((x324)+(x323)+(x318));
evalcond[0]=((((IkReal(-1.00000000000000))*(x322)))+(x325)+(((cj0)*(x308)))+(((IkReal(-1.00000000000000))*(cj1)*(x313)))+(((sj0)*(x309))));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(x312)*(x316)))+(((IkReal(-1.00000000000000))*(sj1)*(x313)))+(((IkReal(-1.00000000000000))*(py)*(x311)))+(x326));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x311)*(x312)))+(((IkReal(-1.00000000000000))*(x322)))+(x325)+(((py)*(r02)*(x316)))+(((IkReal(-1.00000000000000))*(x309)*(x310)))+(((pz)*(r00)*(x311)))+(((r01)*(x308)))+(((IkReal(-1.00000000000000))*(cj1)*(x313)*(x314))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x326)))+(((IkReal(-0.190000000000000))*(x314)))+(((IkReal(-1.00000000000000))*(sj0)*(x310)*(x315)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x309)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((r02)*(sj0)*(x308)))+(((cj1)*(px)*(r01)))+(((x314)*(x315)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x310))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x327=((IkReal(4615000.00000000))*(cj3));
IkReal x328=((py)*(sj0));
IkReal x329=((cj1)*(pz));
IkReal x330=((IkReal(4615000.00000000))*(sj3));
IkReal x331=((IkReal(3475000.00000000))*(sj1));
IkReal x332=((pz)*(sj1));
IkReal x333=((cj0)*(cj1)*(px));
IkReal x334=((cj0)*(px)*(sj1));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(cj1)*(x328)*(x330)))+(((IkReal(-3475000.00000000))*(x329)))+(((IkReal(-1.00000000000000))*(x327)*(x329)))+(((cj0)*(px)*(x331)))+(((IkReal(-1.00000000000000))*(x330)*(x333)))+(((IkReal(-1.00000000000000))*(x330)*(x332)))+(((x327)*(x334)))+(((x328)*(x331)))+(((IkReal(876850.000000000))*(sj3)))+(((sj1)*(x327)*(x328))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((IkReal(660250.000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x328)*(x330)))+(((IkReal(876850.000000000))*(cj3)))+(((IkReal(-3475000.00000000))*(cj1)*(x328)))+(((IkReal(-1.00000000000000))*(pz)*(x331)))+(((IkReal(-1.00000000000000))*(x330)*(x334)))+(((x329)*(x330)))+(((IkReal(-3475000.00000000))*(x333)))+(((IkReal(-1.00000000000000))*(cj1)*(x327)*(x328)))+(((IkReal(-1.00000000000000))*(x327)*(x332)))+(((IkReal(-1.00000000000000))*(x327)*(x333))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(cj1)*(x328)*(x330)))+(((IkReal(-3475000.00000000))*(x329)))+(((IkReal(-1.00000000000000))*(x327)*(x329)))+(((cj0)*(px)*(x331)))+(((IkReal(-1.00000000000000))*(x330)*(x333)))+(((IkReal(-1.00000000000000))*(x330)*(x332)))+(((x327)*(x334)))+(((x328)*(x331)))+(((IkReal(876850.000000000))*(sj3)))+(((sj1)*(x327)*(x328)))))), ((gconst3)*(((IkReal(660250.000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x328)*(x330)))+(((IkReal(876850.000000000))*(cj3)))+(((IkReal(-3475000.00000000))*(cj1)*(x328)))+(((IkReal(-1.00000000000000))*(pz)*(x331)))+(((IkReal(-1.00000000000000))*(x330)*(x334)))+(((x329)*(x330)))+(((IkReal(-3475000.00000000))*(x333)))+(((IkReal(-1.00000000000000))*(cj1)*(x327)*(x328)))+(((IkReal(-1.00000000000000))*(x327)*(x332)))+(((IkReal(-1.00000000000000))*(x327)*(x333)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x335=IKsin(j2);
IkReal x336=IKcos(j2);
IkReal x337=((px)*(sj1));
IkReal x338=((py)*(sj1));
IkReal x339=((IkReal(1.00000000000000))*(r00));
IkReal x340=((cj1)*(sj0));
IkReal x341=((IkReal(1.00000000000000))*(px));
IkReal x342=((IkReal(1.00000000000000))*(pz));
IkReal x343=((cj0)*(r01));
IkReal x344=((pz)*(sj1));
IkReal x345=((cj0)*(cj1));
IkReal x346=((IkReal(0.139000000000000))*(x335));
IkReal x347=((IkReal(0.139000000000000))*(x336));
IkReal x348=((IkReal(0.184600000000000))*(x335));
IkReal x349=((IkReal(0.184600000000000))*(x336));
IkReal x350=((cj3)*(x348));
IkReal x351=((sj3)*(x349));
IkReal x352=((sj3)*(x348));
IkReal x353=((cj3)*(x349));
IkReal x354=((x350)+(x346));
IkReal x355=((x353)+(x352)+(x347));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj1)*(x342)))+(((IkReal(-1.00000000000000))*(x351)))+(x354)+(((cj0)*(x337)))+(((sj0)*(x338))));
evalcond[1]=((IkReal(0.190000000000000))+(x355)+(((IkReal(-1.00000000000000))*(x341)*(x345)))+(((IkReal(-1.00000000000000))*(sj1)*(x342)))+(((IkReal(-1.00000000000000))*(py)*(x340))));
evalcond[2]=((((r01)*(x337)))+(((IkReal(-1.00000000000000))*(r02)*(x340)*(x341)))+(((IkReal(-1.00000000000000))*(x351)))+(((IkReal(-1.00000000000000))*(x338)*(x339)))+(((pz)*(r00)*(x340)))+(x354)+(((IkReal(-1.00000000000000))*(cj1)*(x342)*(x343)))+(((py)*(r02)*(x345))));
evalcond[3]=((((IkReal(-0.190000000000000))*(x343)))+(((IkReal(-1.00000000000000))*(x355)))+(((IkReal(-1.00000000000000))*(sj0)*(x339)*(x344)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x339)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x338)))+(((cj1)*(px)*(r01)))+(((x343)*(x344)))+(((r02)*(sj0)*(x337))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x356=((IkReal(0.0513188000000000))*(cj3));
IkReal x357=(py)*(py);
IkReal x358=(px)*(px);
IkReal x359=(pz)*(pz);
IkReal x360=((r01)*(sj0));
IkReal x361=((IkReal(2.00000000000000))*(py));
IkReal x362=((IkReal(0.190000000000000))*(cj1));
IkReal x363=((cj0)*(py));
IkReal x364=((px)*(sj0));
IkReal x365=((r02)*(sj0));
IkReal x366=((pp)*(sj1));
IkReal x367=((cj1)*(pz));
IkReal x368=((r00)*(sj0));
IkReal x369=((cj0)*(r01));
IkReal x370=((IkReal(1.00000000000000))*(r02));
IkReal x371=((r00)*(sj1));
IkReal x372=((IkReal(0.380000000000000))*(pz));
IkReal x373=((px)*(sj1));
IkReal x374=((IkReal(0.380000000000000))*(cj1));
IkReal x375=((pz)*(sj1));
IkReal x376=((IkReal(1.00000000000000))*(pp));
IkReal x377=((IkReal(0.0361000000000000))*(sj1));
IkReal x378=((cj0)*(r00));
IkReal x379=((IkReal(0.380000000000000))*(py));
IkReal x380=((IkReal(0.190000000000000))*(sj1));
IkReal x381=((cj0)*(px));
IkReal x382=((cj1)*(r02));
IkReal x383=((pz)*(r02));
IkReal x384=((IkReal(1.00000000000000))*(pz));
IkReal x385=((IkReal(2.00000000000000))*(px));
IkReal x386=((px)*(r00));
IkReal x387=((IkReal(0.380000000000000))*(r02)*(sj1));
IkReal x388=((IkReal(2.00000000000000))*(x358));
IkReal x389=((cj1)*(x378));
IkReal x390=((IkReal(2.00000000000000))*(cj0)*(r02));
IkReal x391=((IkReal(2.00000000000000))*(x357));
IkReal x392=((IkReal(2.00000000000000))*(x359));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x364)))+(x363));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x368)))+(x369));
evalcond[3]=((IkReal(0.0172981600000000))+(((sj1)*(x372)))+(((IkReal(-1.00000000000000))*(x376)))+(((x374)*(x381)))+(x356)+(((py)*(sj0)*(x374))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj1)*(x370)))+(((sj1)*(x360)))+(((cj0)*(x371))));
evalcond[5]=((((r02)*(x380)))+(((IkReal(-1.00000000000000))*(x386)))+(((IkReal(-1.00000000000000))*(pz)*(x370)))+(((IkReal(-1.00000000000000))*(py)*(r01)))+(((x360)*(x362)))+(((x362)*(x378))));
evalcond[6]=((((IkReal(-1.00000000000000))*(sj1)*(x370)))+(((IkReal(-1.00000000000000))*(cj1)*(x360)))+(((IkReal(-1.00000000000000))*(x389))));
evalcond[7]=((((IkReal(-1.00000000000000))*(r02)*(x362)))+(((r02)*(x381)))+(((x360)*(x380)))+(((py)*(x365)))+(((IkReal(-1.00000000000000))*(x360)*(x384)))+(((IkReal(-1.00000000000000))*(x378)*(x384)))+(((IkReal(0.190000000000000))*(cj0)*(x371))));
evalcond[8]=((IkReal(0.0533981600000000))+(((IkReal(-1.00000000000000))*(sj1)*(x369)*(x372)))+(((IkReal(0.0361000000000000))*(x369)))+(((IkReal(-1.00000000000000))*(x368)*(x376)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x374)))+(((x363)*(x387)))+(((x368)*(x388)))+(((IkReal(-1.00000000000000))*(cj0)*(x361)*(x383)))+(((IkReal(-1.00000000000000))*(x364)*(x387)))+(((py)*(r00)*(x374)))+(x356)+(((IkReal(-0.0361000000000000))*(x368)))+(((IkReal(2.00000000000000))*(x364)*(x383)))+(((px)*(x360)*(x361)))+(((IkReal(-1.00000000000000))*(x369)*(x391)))+(((pp)*(x369)))+(((sj1)*(x368)*(x372)))+(((IkReal(-1.00000000000000))*(px)*(x361)*(x378))));
evalcond[9]=((((x361)*(x365)*(x367)))+(((r02)*(x377)))+(((cj1)*(x360)*(x391)))+(((r01)*(x361)*(x375)))+(((IkReal(2.00000000000000))*(r02)*(x367)*(x381)))+(((IkReal(0.0361000000000000))*(cj1)*(x360)))+(((IkReal(-1.00000000000000))*(x376)*(x389)))+(((IkReal(-1.00000000000000))*(r02)*(x372)))+(((IkReal(-1.00000000000000))*(r01)*(x379)))+(((x388)*(x389)))+(((IkReal(-1.00000000000000))*(cj1)*(x360)*(x376)))+(((IkReal(-1.00000000000000))*(x366)*(x370)))+(((cj1)*(px)*(x361)*(x369)))+(((IkReal(0.0361000000000000))*(x389)))+(((pz)*(x371)*(x385)))+(((r02)*(sj1)*(x392)))+(((cj1)*(r00)*(x361)*(x364)))+(((IkReal(-0.380000000000000))*(x386))));
evalcond[10]=((((IkReal(-1.00000000000000))*(cj0)*(x371)*(x388)))+(((r01)*(x361)*(x367)))+(((r00)*(x367)*(x385)))+(((IkReal(-1.00000000000000))*(sj1)*(x360)*(x391)))+(((x382)*(x392)))+(((IkReal(-1.00000000000000))*(cj1)*(pp)*(x370)))+(((IkReal(-1.00000000000000))*(x360)*(x372)))+(((IkReal(-1.00000000000000))*(x372)*(x378)))+(((IkReal(-1.00000000000000))*(x361)*(x365)*(x375)))+(((x365)*(x379)))+(((IkReal(-1.00000000000000))*(x361)*(x369)*(x373)))+(((IkReal(0.380000000000000))*(r02)*(x381)))+(((IkReal(0.0361000000000000))*(cj0)*(x371)))+(((x366)*(x378)))+(((IkReal(-2.00000000000000))*(cj0)*(x373)*(x383)))+(((IkReal(-1.00000000000000))*(x361)*(x364)*(x371)))+(((x360)*(x366)))+(((x360)*(x377)))+(((IkReal(-0.0361000000000000))*(x382))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((IkReal(-483025.000000000))+(((IkReal(-1282970.00000000))*(cj3)))+(((IkReal(-851929.000000000))*((sj3)*(sj3))))+(((IkReal(-851929.000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-1.76373686662181))*((cj3)*(cj3))))+(((IkReal(-1.76373686662181))*((sj3)*(sj3))))+(((IkReal(-2.65611510791367))*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((IkReal(-483025.000000000))+(((IkReal(-1282970.00000000))*(cj3)))+(((IkReal(-851929.000000000))*((sj3)*(sj3))))+(((IkReal(-851929.000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-1.76373686662181))*((cj3)*(cj3))))+(((IkReal(-1.76373686662181))*((sj3)*(sj3))))+(((IkReal(-2.65611510791367))*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x393=((IkReal(4615000.00000000))*(px));
IkReal x394=((IkReal(3475000.00000000))*(pz));
IkReal x395=((sj1)*(sj3));
IkReal x396=((py)*(r02));
IkReal x397=((cj1)*(sj0));
IkReal x398=((IkReal(3475000.00000000))*(px));
IkReal x399=((IkReal(4615000.00000000))*(py));
IkReal x400=((cj0)*(cj1));
IkReal x401=((IkReal(4615000.00000000))*(sj3));
IkReal x402=((IkReal(4615000.00000000))*(pz));
IkReal x403=((r01)*(sj1));
IkReal x404=((cj3)*(r00));
IkReal x405=((IkReal(3475000.00000000))*(py));
IkReal x406=((cj3)*(x400));
IkReal x407=((IkReal(3475000.00000000))*(x400));
if( IKabs(((gconst6)*(((((IkReal(-1.00000000000000))*(r00)*(x394)*(x397)))+(((r01)*(x394)*(x400)))+(((r02)*(x397)*(x398)))+(((IkReal(-1.00000000000000))*(sj3)*(x393)*(x400)))+(((r00)*(sj1)*(x405)))+(((IkReal(-1.00000000000000))*(x395)*(x402)))+(((IkReal(-1.00000000000000))*(x397)*(x402)*(x404)))+(((IkReal(-1.00000000000000))*(x398)*(x403)))+(((r01)*(x402)*(x406)))+(((IkReal(-1.00000000000000))*(sj3)*(x397)*(x399)))+(((IkReal(-4615000.00000000))*(x396)*(x406)))+(((IkReal(-1.00000000000000))*(cj3)*(x393)*(x403)))+(((cj3)*(r02)*(x393)*(x397)))+(((IkReal(-1.00000000000000))*(x396)*(x407)))+(((IkReal(876850.000000000))*(sj3)))+(((sj1)*(x399)*(x404))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((IkReal(660250.000000000))+(((IkReal(-1.00000000000000))*(x393)*(x406)))+(((IkReal(-1.00000000000000))*(r02)*(sj3)*(x393)*(x397)))+(((IkReal(-1.00000000000000))*(sj1)*(x394)))+(((IkReal(876850.000000000))*(cj3)))+(((x396)*(x400)*(x401)))+(((IkReal(-1.00000000000000))*(x398)*(x400)))+(((IkReal(-1.00000000000000))*(cj3)*(sj1)*(x402)))+(((IkReal(-1.00000000000000))*(cj3)*(x397)*(x399)))+(((IkReal(-1.00000000000000))*(x397)*(x405)))+(((pz)*(r00)*(x397)*(x401)))+(((IkReal(-1.00000000000000))*(pz)*(r01)*(x400)*(x401)))+(((r01)*(x393)*(x395)))+(((IkReal(-1.00000000000000))*(r00)*(x395)*(x399))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst6)*(((((IkReal(-1.00000000000000))*(r00)*(x394)*(x397)))+(((r01)*(x394)*(x400)))+(((r02)*(x397)*(x398)))+(((IkReal(-1.00000000000000))*(sj3)*(x393)*(x400)))+(((r00)*(sj1)*(x405)))+(((IkReal(-1.00000000000000))*(x395)*(x402)))+(((IkReal(-1.00000000000000))*(x397)*(x402)*(x404)))+(((IkReal(-1.00000000000000))*(x398)*(x403)))+(((r01)*(x402)*(x406)))+(((IkReal(-1.00000000000000))*(sj3)*(x397)*(x399)))+(((IkReal(-4615000.00000000))*(x396)*(x406)))+(((IkReal(-1.00000000000000))*(cj3)*(x393)*(x403)))+(((cj3)*(r02)*(x393)*(x397)))+(((IkReal(-1.00000000000000))*(x396)*(x407)))+(((IkReal(876850.000000000))*(sj3)))+(((sj1)*(x399)*(x404)))))), ((gconst6)*(((IkReal(660250.000000000))+(((IkReal(-1.00000000000000))*(x393)*(x406)))+(((IkReal(-1.00000000000000))*(r02)*(sj3)*(x393)*(x397)))+(((IkReal(-1.00000000000000))*(sj1)*(x394)))+(((IkReal(876850.000000000))*(cj3)))+(((x396)*(x400)*(x401)))+(((IkReal(-1.00000000000000))*(x398)*(x400)))+(((IkReal(-1.00000000000000))*(cj3)*(sj1)*(x402)))+(((IkReal(-1.00000000000000))*(cj3)*(x397)*(x399)))+(((IkReal(-1.00000000000000))*(x397)*(x405)))+(((pz)*(r00)*(x397)*(x401)))+(((IkReal(-1.00000000000000))*(pz)*(r01)*(x400)*(x401)))+(((r01)*(x393)*(x395)))+(((IkReal(-1.00000000000000))*(r00)*(x395)*(x399)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x408=IKsin(j2);
IkReal x409=IKcos(j2);
IkReal x410=((px)*(sj1));
IkReal x411=((py)*(sj1));
IkReal x412=((IkReal(1.00000000000000))*(r00));
IkReal x413=((cj1)*(sj0));
IkReal x414=((IkReal(1.00000000000000))*(px));
IkReal x415=((IkReal(1.00000000000000))*(pz));
IkReal x416=((cj0)*(r01));
IkReal x417=((pz)*(sj1));
IkReal x418=((cj0)*(cj1));
IkReal x419=((IkReal(0.139000000000000))*(x408));
IkReal x420=((IkReal(0.139000000000000))*(x409));
IkReal x421=((IkReal(0.184600000000000))*(x408));
IkReal x422=((IkReal(0.184600000000000))*(x409));
IkReal x423=((sj3)*(x422));
IkReal x424=((cj3)*(x421));
IkReal x425=((sj3)*(x421));
IkReal x426=((cj3)*(x422));
IkReal x427=((x419)+(x424));
IkReal x428=((x426)+(x425)+(x420));
evalcond[0]=((((sj0)*(x411)))+(((IkReal(-1.00000000000000))*(cj1)*(x415)))+(((IkReal(-1.00000000000000))*(x423)))+(((cj0)*(x410)))+(x427));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(py)*(x413)))+(x428)+(((IkReal(-1.00000000000000))*(x414)*(x418)))+(((IkReal(-1.00000000000000))*(sj1)*(x415))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x413)*(x414)))+(((py)*(r02)*(x418)))+(((IkReal(-1.00000000000000))*(x427)))+(((pz)*(r00)*(x413)))+(((r01)*(x410)))+(x423)+(((IkReal(-1.00000000000000))*(cj1)*(x415)*(x416)))+(((IkReal(-1.00000000000000))*(x411)*(x412))));
evalcond[3]=((((x416)*(x417)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x411)))+(((r02)*(sj0)*(x410)))+(x428)+(((IkReal(-0.190000000000000))*(x416)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(sj0)*(x412)*(x417)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x412))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x429=((cj1)*(cj3));
IkReal x430=((sj1)*(sj3));
IkReal x431=((IkReal(3475000.00000000))*(cj1));
IkReal x432=((cj0)*(px));
IkReal x433=((py)*(sj0));
IkReal x434=((IkReal(4615000.00000000))*(pz));
IkReal x435=((cj1)*(sj3));
IkReal x436=((IkReal(3475000.00000000))*(sj1));
IkReal x437=((cj3)*(sj1));
IkReal x438=((IkReal(4615000.00000000))*(x432));
if( IKabs(((gconst5)*(((((IkReal(-1.00000000000000))*(x430)*(x434)))+(((IkReal(-1.00000000000000))*(x435)*(x438)))+(((IkReal(4615000.00000000))*(x433)*(x437)))+(((IkReal(-1.00000000000000))*(x429)*(x434)))+(((IkReal(-4615000.00000000))*(x433)*(x435)))+(((IkReal(-1.00000000000000))*(pz)*(x431)))+(((x433)*(x436)))+(((x437)*(x438)))+(((IkReal(876850.000000000))*(sj3)))+(((x432)*(x436))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((IkReal(660250.000000000))+(((IkReal(-1.00000000000000))*(x430)*(x438)))+(((x434)*(x435)))+(((IkReal(-1.00000000000000))*(x431)*(x432)))+(((IkReal(-1.00000000000000))*(x431)*(x433)))+(((IkReal(876850.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x429)*(x438)))+(((IkReal(-1.00000000000000))*(x434)*(x437)))+(((IkReal(-4615000.00000000))*(x429)*(x433)))+(((IkReal(-1.00000000000000))*(pz)*(x436)))+(((IkReal(-4615000.00000000))*(x430)*(x433))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst5)*(((((IkReal(-1.00000000000000))*(x430)*(x434)))+(((IkReal(-1.00000000000000))*(x435)*(x438)))+(((IkReal(4615000.00000000))*(x433)*(x437)))+(((IkReal(-1.00000000000000))*(x429)*(x434)))+(((IkReal(-4615000.00000000))*(x433)*(x435)))+(((IkReal(-1.00000000000000))*(pz)*(x431)))+(((x433)*(x436)))+(((x437)*(x438)))+(((IkReal(876850.000000000))*(sj3)))+(((x432)*(x436)))))), ((gconst5)*(((IkReal(660250.000000000))+(((IkReal(-1.00000000000000))*(x430)*(x438)))+(((x434)*(x435)))+(((IkReal(-1.00000000000000))*(x431)*(x432)))+(((IkReal(-1.00000000000000))*(x431)*(x433)))+(((IkReal(876850.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x429)*(x438)))+(((IkReal(-1.00000000000000))*(x434)*(x437)))+(((IkReal(-4615000.00000000))*(x429)*(x433)))+(((IkReal(-1.00000000000000))*(pz)*(x436)))+(((IkReal(-4615000.00000000))*(x430)*(x433)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x439=IKsin(j2);
IkReal x440=IKcos(j2);
IkReal x441=((px)*(sj1));
IkReal x442=((py)*(sj1));
IkReal x443=((IkReal(1.00000000000000))*(r00));
IkReal x444=((cj1)*(sj0));
IkReal x445=((IkReal(1.00000000000000))*(px));
IkReal x446=((IkReal(1.00000000000000))*(pz));
IkReal x447=((cj0)*(r01));
IkReal x448=((pz)*(sj1));
IkReal x449=((cj0)*(cj1));
IkReal x450=((IkReal(0.139000000000000))*(x439));
IkReal x451=((IkReal(0.139000000000000))*(x440));
IkReal x452=((IkReal(0.184600000000000))*(x439));
IkReal x453=((IkReal(0.184600000000000))*(x440));
IkReal x454=((sj3)*(x453));
IkReal x455=((cj3)*(x452));
IkReal x456=((sj3)*(x452));
IkReal x457=((cj3)*(x453));
IkReal x458=((x455)+(x450));
IkReal x459=((x456)+(x457)+(x451));
evalcond[0]=((((sj0)*(x442)))+(((IkReal(-1.00000000000000))*(cj1)*(x446)))+(((cj0)*(x441)))+(((IkReal(-1.00000000000000))*(x454)))+(x458));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(x445)*(x449)))+(((IkReal(-1.00000000000000))*(py)*(x444)))+(x459)+(((IkReal(-1.00000000000000))*(sj1)*(x446))));
evalcond[2]=((((pz)*(r00)*(x444)))+(((IkReal(-1.00000000000000))*(x458)))+(x454)+(((r01)*(x441)))+(((IkReal(-1.00000000000000))*(r02)*(x444)*(x445)))+(((py)*(r02)*(x449)))+(((IkReal(-1.00000000000000))*(x442)*(x443)))+(((IkReal(-1.00000000000000))*(cj1)*(x446)*(x447))));
evalcond[3]=((((x447)*(x448)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x443)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x442)))+(((IkReal(-1.00000000000000))*(sj0)*(x443)*(x448)))+(x459)+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-0.190000000000000))*(x447)))+(((r02)*(sj0)*(x441)))+(((cj1)*(px)*(r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x460=((IkReal(923.000000000000))*(cj3));
IkReal x461=((cj1)*(r02));
IkReal x462=((sj0)*(sj1));
IkReal x463=((IkReal(923.000000000000))*(sj3));
IkReal x464=((IkReal(5000.00000000000))*(cj4));
IkReal x465=((cj1)*(pz));
IkReal x466=((cj0)*(sj1));
if( IKabs(((gconst2)*(((((x461)*(x463)))+(((IkReal(-1.00000000000000))*(r00)*(x463)*(x466)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x464)*(x466)))+(((cj3)*(x464)*(x465)))+(((IkReal(-1.00000000000000))*(r01)*(x462)*(x463)))+(((IkReal(-1.00000000000000))*(cj3)*(py)*(x462)*(x464))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(sj3)*(x464)*(x465)))+(((IkReal(-1.00000000000000))*(r01)*(x460)*(x462)))+(((IkReal(-695.000000000000))*(r01)*(x462)))+(((IkReal(-695.000000000000))*(r00)*(x466)))+(((px)*(sj3)*(x464)*(x466)))+(((IkReal(-1.00000000000000))*(r00)*(x460)*(x466)))+(((x460)*(x461)))+(((IkReal(695.000000000000))*(x461)))+(((py)*(sj3)*(x462)*(x464))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst2)*(((((x461)*(x463)))+(((IkReal(-1.00000000000000))*(r00)*(x463)*(x466)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x464)*(x466)))+(((cj3)*(x464)*(x465)))+(((IkReal(-1.00000000000000))*(r01)*(x462)*(x463)))+(((IkReal(-1.00000000000000))*(cj3)*(py)*(x462)*(x464)))))), ((gconst2)*(((((IkReal(-1.00000000000000))*(sj3)*(x464)*(x465)))+(((IkReal(-1.00000000000000))*(r01)*(x460)*(x462)))+(((IkReal(-695.000000000000))*(r01)*(x462)))+(((IkReal(-695.000000000000))*(r00)*(x466)))+(((px)*(sj3)*(x464)*(x466)))+(((IkReal(-1.00000000000000))*(r00)*(x460)*(x466)))+(((x460)*(x461)))+(((IkReal(695.000000000000))*(x461)))+(((py)*(sj3)*(x462)*(x464)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x467=IKsin(j2);
IkReal x468=IKcos(j2);
IkReal x469=(pz)*(pz);
IkReal x470=(py)*(py);
IkReal x471=(px)*(px);
IkReal x472=((px)*(sj1));
IkReal x473=((r01)*(sj0));
IkReal x474=((IkReal(0.0513188000000000))*(cj4));
IkReal x475=((IkReal(1.00000000000000))*(pp));
IkReal x476=((IkReal(2.00000000000000))*(py));
IkReal x477=((pz)*(r02));
IkReal x478=((cj1)*(sj0));
IkReal x479=((cj3)*(cj4));
IkReal x480=((IkReal(1.00000000000000))*(sj1));
IkReal x481=((py)*(r00));
IkReal x482=((pp)*(sj1));
IkReal x483=((cj0)*(r01));
IkReal x484=((IkReal(0.380000000000000))*(pz));
IkReal x485=((r00)*(sj0));
IkReal x486=((pz)*(sj1));
IkReal x487=((IkReal(2.00000000000000))*(cj0));
IkReal x488=((pz)*(r00));
IkReal x489=((r02)*(sj1));
IkReal x490=((cj1)*(pz));
IkReal x491=((r00)*(sj1));
IkReal x492=((IkReal(2.00000000000000))*(cj1));
IkReal x493=((IkReal(0.184600000000000))*(cj3));
IkReal x494=((py)*(sj0));
IkReal x495=((IkReal(0.380000000000000))*(r02));
IkReal x496=((cj1)*(px));
IkReal x497=((px)*(r00));
IkReal x498=((cj1)*(r02));
IkReal x499=((cj0)*(r00));
IkReal x500=((IkReal(0.184600000000000))*(sj3));
IkReal x501=((cj0)*(py));
IkReal x502=((IkReal(1.00000000000000))*(cj1));
IkReal x503=((IkReal(0.139000000000000))*(x468));
IkReal x504=((sj3)*(x467));
IkReal x505=((IkReal(0.139000000000000))*(x467));
IkReal x506=((cj1)*(x499));
IkReal x507=((sj4)*(x468));
IkReal x508=((cj4)*(sj3)*(x468));
evalcond[0]=((((cj0)*(x491)))+(((cj4)*(x504)))+(((IkReal(-1.00000000000000))*(x498)))+(((sj1)*(x473)))+(((x468)*(x479))));
evalcond[1]=((((x467)*(x493)))+(((sj1)*(x494)))+(((IkReal(-1.00000000000000))*(x490)))+(((IkReal(-1.00000000000000))*(x468)*(x500)))+(x505)+(((cj0)*(x472))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x499)*(x502)))+(((IkReal(-1.00000000000000))*(x473)*(x502)))+(((IkReal(-1.00000000000000))*(x467)*(x479)))+(x508)+(((IkReal(-1.00000000000000))*(r02)*(x480))));
evalcond[3]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x480)))+(((IkReal(-1.00000000000000))*(cj0)*(x496)))+(((x467)*(x500)))+(((x468)*(x493)))+(((IkReal(-1.00000000000000))*(py)*(x478)))+(x503));
evalcond[4]=((((IkReal(-1.00000000000000))*(px)*(r02)*(x478)))+(((sj4)*(x467)*(x493)))+(((x478)*(x488)))+(((x498)*(x501)))+(((IkReal(-1.00000000000000))*(x480)*(x481)))+(((IkReal(-1.00000000000000))*(x483)*(x490)))+(((sj4)*(x505)))+(((IkReal(-1.00000000000000))*(x500)*(x507)))+(((r01)*(x472))));
evalcond[5]=((((IkReal(0.190000000000000))*(x485)))+(((r02)*(sj0)*(x472)))+(((IkReal(-1.00000000000000))*(r02)*(x480)*(x501)))+(((IkReal(-1.00000000000000))*(sj4)*(x503)))+(((x483)*(x486)))+(((IkReal(-1.00000000000000))*(pz)*(x480)*(x485)))+(((IkReal(-1.00000000000000))*(sj4)*(x467)*(x500)))+(((IkReal(-1.00000000000000))*(x481)*(x502)))+(((IkReal(-1.00000000000000))*(x493)*(x507)))+(((IkReal(-0.190000000000000))*(x483)))+(((r01)*(x496))));
evalcond[6]=((((x476)*(x483)*(x496)))+(((IkReal(-0.380000000000000))*(x497)))+(((IkReal(2.00000000000000))*(x472)*(x488)))+(((IkReal(-1.00000000000000))*(x467)*(x474)))+(((IkReal(-1.00000000000000))*(x475)*(x489)))+(((IkReal(0.0147561600000000))*(x508)))+(((IkReal(-0.380000000000000))*(py)*(r01)))+(((cj1)*(r00)*(x471)*(x487)))+(((IkReal(0.0361000000000000))*(x506)))+(((IkReal(-1.00000000000000))*(x475)*(x506)))+(((IkReal(-0.0533981600000000))*(x467)*(x479)))+(((IkReal(-1.00000000000000))*(cj1)*(x473)*(x475)))+(((x476)*(x478)*(x497)))+(((x477)*(x487)*(x496)))+(((IkReal(0.0361000000000000))*(x489)))+(((IkReal(-0.380000000000000))*(x477)))+(((x476)*(x477)*(x478)))+(((IkReal(0.0361000000000000))*(cj1)*(x473)))+(((r01)*(x476)*(x486)))+(((x470)*(x473)*(x492)))+(((IkReal(2.00000000000000))*(x469)*(x489))));
evalcond[7]=((((px)*(x488)*(x492)))+(((IkReal(-0.0361000000000000))*(x498)))+(((IkReal(-1.00000000000000))*(x471)*(x487)*(x491)))+(((IkReal(-1.00000000000000))*(x472)*(x477)*(x487)))+(((IkReal(-2.00000000000000))*(sj1)*(x470)*(x473)))+(((IkReal(0.0361000000000000))*(cj0)*(x491)))+(((x494)*(x495)))+(((IkReal(0.0361000000000000))*(sj1)*(x473)))+(((IkReal(0.0147561600000000))*(cj4)*(x504)))+(((IkReal(-1.00000000000000))*(sj0)*(sj1)*(x476)*(x477)))+(((cj0)*(px)*(x495)))+(((IkReal(0.0533981600000000))*(x468)*(x479)))+(((IkReal(-1.00000000000000))*(x484)*(x499)))+(((IkReal(-1.00000000000000))*(x472)*(x476)*(x485)))+(((IkReal(-1.00000000000000))*(x472)*(x476)*(x483)))+(((r01)*(x476)*(x490)))+(((x468)*(x474)))+(((x473)*(x482)))+(((IkReal(-1.00000000000000))*(x475)*(x498)))+(((IkReal(-1.00000000000000))*(x473)*(x484)))+(((x482)*(x499)))+(((r02)*(x469)*(x492))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x509=((cj0)*(r00));
IkReal x510=((cj1)*(sj3));
IkReal x511=((sj1)*(sj3));
IkReal x512=((IkReal(1.00000000000000))*(cj3));
IkReal x513=((r01)*(sj0));
IkReal x514=((x512)*(x513));
if( IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(cj1)*(x514)))+(((IkReal(-1.00000000000000))*(cj1)*(x509)*(x512)))+(((IkReal(-1.00000000000000))*(x509)*(x511)))+(((r02)*(x510)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x512)))+(((IkReal(-1.00000000000000))*(x511)*(x513))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((x510)*(x513)))+(((IkReal(-1.00000000000000))*(sj1)*(x509)*(x512)))+(((IkReal(-1.00000000000000))*(sj1)*(x514)))+(((r02)*(x511)))+(((cj1)*(cj3)*(r02)))+(((x509)*(x510))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst1)*(((((IkReal(-1.00000000000000))*(cj1)*(x514)))+(((IkReal(-1.00000000000000))*(cj1)*(x509)*(x512)))+(((IkReal(-1.00000000000000))*(x509)*(x511)))+(((r02)*(x510)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x512)))+(((IkReal(-1.00000000000000))*(x511)*(x513)))))), ((gconst1)*(((((x510)*(x513)))+(((IkReal(-1.00000000000000))*(sj1)*(x509)*(x512)))+(((IkReal(-1.00000000000000))*(sj1)*(x514)))+(((r02)*(x511)))+(((cj1)*(cj3)*(r02)))+(((x509)*(x510)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x515=IKsin(j2);
IkReal x516=IKcos(j2);
IkReal x517=(pz)*(pz);
IkReal x518=(py)*(py);
IkReal x519=(px)*(px);
IkReal x520=((px)*(sj1));
IkReal x521=((r01)*(sj0));
IkReal x522=((IkReal(0.0513188000000000))*(cj4));
IkReal x523=((IkReal(1.00000000000000))*(pp));
IkReal x524=((IkReal(2.00000000000000))*(py));
IkReal x525=((pz)*(r02));
IkReal x526=((cj1)*(sj0));
IkReal x527=((cj3)*(cj4));
IkReal x528=((IkReal(1.00000000000000))*(sj1));
IkReal x529=((py)*(r00));
IkReal x530=((pp)*(sj1));
IkReal x531=((cj0)*(r01));
IkReal x532=((IkReal(0.380000000000000))*(pz));
IkReal x533=((r00)*(sj0));
IkReal x534=((pz)*(sj1));
IkReal x535=((IkReal(2.00000000000000))*(cj0));
IkReal x536=((pz)*(r00));
IkReal x537=((r02)*(sj1));
IkReal x538=((cj1)*(pz));
IkReal x539=((r00)*(sj1));
IkReal x540=((IkReal(2.00000000000000))*(cj1));
IkReal x541=((IkReal(0.184600000000000))*(cj3));
IkReal x542=((py)*(sj0));
IkReal x543=((IkReal(0.380000000000000))*(r02));
IkReal x544=((cj1)*(px));
IkReal x545=((px)*(r00));
IkReal x546=((cj1)*(r02));
IkReal x547=((cj0)*(r00));
IkReal x548=((IkReal(0.184600000000000))*(sj3));
IkReal x549=((cj0)*(py));
IkReal x550=((IkReal(1.00000000000000))*(cj1));
IkReal x551=((IkReal(0.139000000000000))*(x516));
IkReal x552=((sj3)*(x515));
IkReal x553=((IkReal(0.139000000000000))*(x515));
IkReal x554=((cj1)*(x547));
IkReal x555=((sj4)*(x516));
IkReal x556=((cj4)*(sj3)*(x516));
evalcond[0]=((((IkReal(-1.00000000000000))*(x546)))+(((cj0)*(x539)))+(((sj1)*(x521)))+(((cj4)*(x552)))+(((x516)*(x527))));
evalcond[1]=((((sj1)*(x542)))+(((cj0)*(x520)))+(((IkReal(-1.00000000000000))*(x538)))+(((x515)*(x541)))+(((IkReal(-1.00000000000000))*(x516)*(x548)))+(x553));
evalcond[2]=((((IkReal(-1.00000000000000))*(x521)*(x550)))+(((IkReal(-1.00000000000000))*(x547)*(x550)))+(((IkReal(-1.00000000000000))*(x515)*(x527)))+(((IkReal(-1.00000000000000))*(r02)*(x528)))+(x556));
evalcond[3]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(py)*(x526)))+(((x516)*(x541)))+(((IkReal(-1.00000000000000))*(cj0)*(x544)))+(((x515)*(x548)))+(x551)+(((IkReal(-1.00000000000000))*(pz)*(x528))));
evalcond[4]=((((sj4)*(x553)))+(((x526)*(x536)))+(((IkReal(-1.00000000000000))*(x531)*(x538)))+(((IkReal(-1.00000000000000))*(x528)*(x529)))+(((IkReal(-1.00000000000000))*(x548)*(x555)))+(((IkReal(-1.00000000000000))*(px)*(r02)*(x526)))+(((r01)*(x520)))+(((sj4)*(x515)*(x541)))+(((x546)*(x549))));
evalcond[5]=((((IkReal(0.190000000000000))*(x533)))+(((r02)*(sj0)*(x520)))+(((x531)*(x534)))+(((IkReal(-1.00000000000000))*(x529)*(x550)))+(((IkReal(-1.00000000000000))*(pz)*(x528)*(x533)))+(((IkReal(-1.00000000000000))*(sj4)*(x551)))+(((IkReal(-1.00000000000000))*(r02)*(x528)*(x549)))+(((IkReal(-1.00000000000000))*(sj4)*(x515)*(x548)))+(((IkReal(-0.190000000000000))*(x531)))+(((IkReal(-1.00000000000000))*(x541)*(x555)))+(((r01)*(x544))));
evalcond[6]=((((IkReal(0.0361000000000000))*(cj1)*(x521)))+(((IkReal(-0.0533981600000000))*(x515)*(x527)))+(((r01)*(x524)*(x534)))+(((x524)*(x525)*(x526)))+(((x518)*(x521)*(x540)))+(((IkReal(2.00000000000000))*(x517)*(x537)))+(((IkReal(-1.00000000000000))*(x523)*(x537)))+(((x524)*(x531)*(x544)))+(((IkReal(-0.380000000000000))*(py)*(r01)))+(((IkReal(-1.00000000000000))*(x523)*(x554)))+(((IkReal(2.00000000000000))*(x520)*(x536)))+(((IkReal(-1.00000000000000))*(x515)*(x522)))+(((cj1)*(r00)*(x519)*(x535)))+(((x524)*(x526)*(x545)))+(((IkReal(0.0361000000000000))*(x554)))+(((IkReal(-1.00000000000000))*(cj1)*(x521)*(x523)))+(((IkReal(0.0361000000000000))*(x537)))+(((IkReal(-0.380000000000000))*(x525)))+(((x525)*(x535)*(x544)))+(((IkReal(-0.380000000000000))*(x545)))+(((IkReal(0.0147561600000000))*(x556))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x519)*(x535)*(x539)))+(((r01)*(x524)*(x538)))+(((IkReal(-1.00000000000000))*(x532)*(x547)))+(((IkReal(-1.00000000000000))*(x521)*(x532)))+(((IkReal(-1.00000000000000))*(x523)*(x546)))+(((x542)*(x543)))+(((IkReal(0.0533981600000000))*(x516)*(x527)))+(((cj0)*(px)*(x543)))+(((IkReal(0.0147561600000000))*(cj4)*(x552)))+(((x516)*(x522)))+(((IkReal(-1.00000000000000))*(sj0)*(sj1)*(x524)*(x525)))+(((IkReal(-2.00000000000000))*(sj1)*(x518)*(x521)))+(((IkReal(0.0361000000000000))*(sj1)*(x521)))+(((r02)*(x517)*(x540)))+(((IkReal(-1.00000000000000))*(x520)*(x525)*(x535)))+(((x521)*(x530)))+(((IkReal(0.0361000000000000))*(cj0)*(x539)))+(((px)*(x536)*(x540)))+(((IkReal(-1.00000000000000))*(x520)*(x524)*(x531)))+(((IkReal(-1.00000000000000))*(x520)*(x524)*(x533)))+(((IkReal(-0.0361000000000000))*(x546)))+(((x530)*(x547))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x557=((IkReal(1000.00000000000))*(r02));
IkReal x558=((IkReal(1000.00000000000))*(r00));
IkReal x559=((IkReal(1000.00000000000))*(r01));
IkReal x560=((IkReal(190.000000000000))*(r02));
IkReal x561=((IkReal(190.000000000000))*(r01)*(sj0));
IkReal x562=((IkReal(190.000000000000))*(cj0)*(r00));
if( IKabs(((gconst0)*(((((py)*(x559)))+(((pz)*(x557)))+(((px)*(x558)))+(((IkReal(-1.00000000000000))*(cj1)*(x562)))+(((IkReal(-1.00000000000000))*(cj1)*(x561)))+(((IkReal(-1.00000000000000))*(sj1)*(x560))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(pz)*(sj0)*(x559)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x558)))+(((py)*(sj0)*(x557)))+(((cj0)*(px)*(x557)))+(((IkReal(-1.00000000000000))*(cj1)*(x560)))+(((sj1)*(x561)))+(((sj1)*(x562)))+(((IkReal(-184.600000000000))*(cj4))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst0)*(((((py)*(x559)))+(((pz)*(x557)))+(((px)*(x558)))+(((IkReal(-1.00000000000000))*(cj1)*(x562)))+(((IkReal(-1.00000000000000))*(cj1)*(x561)))+(((IkReal(-1.00000000000000))*(sj1)*(x560)))))), ((gconst0)*(((((IkReal(-1.00000000000000))*(pz)*(sj0)*(x559)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x558)))+(((py)*(sj0)*(x557)))+(((cj0)*(px)*(x557)))+(((IkReal(-1.00000000000000))*(cj1)*(x560)))+(((sj1)*(x561)))+(((sj1)*(x562)))+(((IkReal(-184.600000000000))*(cj4)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x563=IKcos(j3);
IkReal x564=((r01)*(sj0));
IkReal x565=((IkReal(0.190000000000000))*(cj1));
IkReal x566=((cj0)*(py));
IkReal x567=((px)*(sj0));
IkReal x568=((py)*(sj0));
IkReal x569=((r00)*(sj0));
IkReal x570=((cj0)*(r01));
IkReal x571=((IkReal(1.00000000000000))*(pz));
IkReal x572=((IkReal(1.00000000000000))*(pp));
IkReal x573=((IkReal(0.380000000000000))*(cj1));
IkReal x574=((cj0)*(r00));
IkReal x575=((IkReal(0.190000000000000))*(sj1));
IkReal x576=((IkReal(0.139000000000000))*(cj4));
IkReal x577=((cj0)*(px));
IkReal x578=((IkReal(2.00000000000000))*(px)*(py));
IkReal x579=((IkReal(0.380000000000000))*(r02)*(sj1));
IkReal x580=((IkReal(0.0513188000000000))*(x563));
IkReal x581=((IkReal(0.380000000000000))*(pz)*(sj1));
IkReal x582=((IkReal(2.00000000000000))*(pz)*(r02));
evalcond[0]=((IkReal(0.0172981600000000))+(((x573)*(x577)))+(((IkReal(-1.00000000000000))*(x572)))+(x580)+(x581)+(((x568)*(x573))));
evalcond[1]=((((x564)*(x565)))+(((IkReal(-1.00000000000000))*(px)*(r00)))+(((r02)*(x575)))+(((x565)*(x574)))+(((IkReal(-1.00000000000000))*(py)*(r01)))+(((IkReal(-1.00000000000000))*(r02)*(x571)))+(((x576)*(IKsin(j3)))));
evalcond[2]=((((x574)*(x575)))+(((r02)*(x577)))+(((IkReal(-1.00000000000000))*(x571)*(x574)))+(((IkReal(-0.184600000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x563)*(x576)))+(((IkReal(-1.00000000000000))*(x564)*(x571)))+(((x564)*(x575)))+(((r02)*(x568)))+(((IkReal(-1.00000000000000))*(r02)*(x565))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj4)*(x580)))+(((IkReal(-0.0533981600000000))*(sj4)))+(((IkReal(-1.00000000000000))*(x569)*(x572)))+(((IkReal(0.0361000000000000))*(x570)))+(((x567)*(x582)))+(((IkReal(-2.00000000000000))*(px)*(r00)*(x566)))+(((IkReal(-0.0361000000000000))*(x569)))+(((IkReal(-2.00000000000000))*(py)*(r01)*(x566)))+(((IkReal(-1.00000000000000))*(x570)*(x581)))+(((py)*(r00)*(x573)))+(((x564)*(x578)))+(((IkReal(-1.00000000000000))*(x567)*(x579)))+(((x566)*(x579)))+(((x569)*(x581)))+(((IkReal(-1.00000000000000))*(x566)*(x582)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x573)))+(((pp)*(x570)))+(((IkReal(2.00000000000000))*(px)*(r00)*(x567))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3))))));
dummyeval[0]=((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
IkReal x583=((IkReal(923.000000000000))*(cj4));
gconst2=IKsign(((((IkReal(695.000000000000))*(cj3)*(cj4)))+(((x583)*((cj3)*(cj3))))+(((x583)*((sj3)*(sj3))))));
IkReal x584=((IkReal(1.32805755395683))*(cj4));
dummyeval[0]=((((x584)*((cj3)*(cj3))))+(((cj3)*(cj4)))+(((x584)*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x585=((IkReal(0.0513188000000000))*(cj3));
IkReal x586=(py)*(py);
IkReal x587=(px)*(px);
IkReal x588=(pz)*(pz);
IkReal x589=((r01)*(sj0));
IkReal x590=((IkReal(2.00000000000000))*(py));
IkReal x591=((IkReal(0.190000000000000))*(cj1));
IkReal x592=((cj0)*(py));
IkReal x593=((px)*(sj0));
IkReal x594=((r02)*(sj0));
IkReal x595=((pp)*(sj1));
IkReal x596=((cj1)*(pz));
IkReal x597=((r00)*(sj0));
IkReal x598=((cj0)*(r01));
IkReal x599=((IkReal(1.00000000000000))*(r02));
IkReal x600=((r00)*(sj1));
IkReal x601=((IkReal(0.380000000000000))*(pz));
IkReal x602=((px)*(sj1));
IkReal x603=((IkReal(0.380000000000000))*(cj1));
IkReal x604=((pz)*(sj1));
IkReal x605=((IkReal(1.00000000000000))*(pp));
IkReal x606=((IkReal(0.0361000000000000))*(sj1));
IkReal x607=((cj0)*(r00));
IkReal x608=((IkReal(0.380000000000000))*(py));
IkReal x609=((IkReal(0.190000000000000))*(sj1));
IkReal x610=((cj0)*(px));
IkReal x611=((cj1)*(r02));
IkReal x612=((pz)*(r02));
IkReal x613=((IkReal(1.00000000000000))*(pz));
IkReal x614=((IkReal(2.00000000000000))*(px));
IkReal x615=((px)*(r00));
IkReal x616=((IkReal(0.380000000000000))*(r02)*(sj1));
IkReal x617=((IkReal(2.00000000000000))*(x587));
IkReal x618=((cj1)*(x607));
IkReal x619=((IkReal(2.00000000000000))*(cj0)*(r02));
IkReal x620=((IkReal(2.00000000000000))*(x586));
IkReal x621=((IkReal(2.00000000000000))*(x588));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x593)))+(x592));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x597)))+(x598));
evalcond[3]=((IkReal(0.0172981600000000))+(((sj1)*(x601)))+(((x603)*(x610)))+(x585)+(((IkReal(-1.00000000000000))*(x605)))+(((py)*(sj0)*(x603))));
evalcond[4]=((((sj1)*(x589)))+(((IkReal(-1.00000000000000))*(cj1)*(x599)))+(((cj0)*(x600))));
evalcond[5]=((((x591)*(x607)))+(((IkReal(-1.00000000000000))*(pz)*(x599)))+(((IkReal(-1.00000000000000))*(x615)))+(((r02)*(x609)))+(((IkReal(-1.00000000000000))*(py)*(r01)))+(((x589)*(x591))));
evalcond[6]=((((IkReal(-1.00000000000000))*(sj1)*(x599)))+(((IkReal(-1.00000000000000))*(x618)))+(((IkReal(-1.00000000000000))*(cj1)*(x589))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x589)*(x613)))+(((py)*(x594)))+(((x589)*(x609)))+(((IkReal(-1.00000000000000))*(x607)*(x613)))+(((r02)*(x610)))+(((IkReal(-1.00000000000000))*(r02)*(x591)))+(((IkReal(0.190000000000000))*(cj0)*(x600))));
evalcond[8]=((IkReal(-0.0533981600000000))+(((IkReal(-1.00000000000000))*(sj1)*(x598)*(x601)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x603)))+(((IkReal(-0.0361000000000000))*(x597)))+(((px)*(x589)*(x590)))+(((IkReal(-1.00000000000000))*(x597)*(x605)))+(((x597)*(x617)))+(((pp)*(x598)))+(((x592)*(x616)))+(((sj1)*(x597)*(x601)))+(((IkReal(-1.00000000000000))*(px)*(x590)*(x607)))+(((IkReal(2.00000000000000))*(x593)*(x612)))+(((IkReal(-1.00000000000000))*(cj0)*(x590)*(x612)))+(((IkReal(0.0361000000000000))*(x598)))+(((py)*(r00)*(x603)))+(((IkReal(-1.00000000000000))*(x585)))+(((IkReal(-1.00000000000000))*(x593)*(x616)))+(((IkReal(-1.00000000000000))*(x598)*(x620))));
evalcond[9]=((((IkReal(-1.00000000000000))*(r01)*(x608)))+(((IkReal(0.0361000000000000))*(cj1)*(x589)))+(((cj1)*(r00)*(x590)*(x593)))+(((IkReal(-1.00000000000000))*(x605)*(x618)))+(((r01)*(x590)*(x604)))+(((x617)*(x618)))+(((IkReal(-1.00000000000000))*(cj1)*(x589)*(x605)))+(((cj1)*(x589)*(x620)))+(((IkReal(-1.00000000000000))*(x595)*(x599)))+(((r02)*(x606)))+(((IkReal(-1.00000000000000))*(r02)*(x601)))+(((IkReal(2.00000000000000))*(r02)*(x596)*(x610)))+(((r02)*(sj1)*(x621)))+(((IkReal(-0.380000000000000))*(x615)))+(((x590)*(x594)*(x596)))+(((pz)*(x600)*(x614)))+(((cj1)*(px)*(x590)*(x598)))+(((IkReal(0.0361000000000000))*(x618))));
evalcond[10]=((((IkReal(-1.00000000000000))*(cj0)*(x600)*(x617)))+(((x594)*(x608)))+(((r00)*(x596)*(x614)))+(((IkReal(0.380000000000000))*(r02)*(x610)))+(((x595)*(x607)))+(((x589)*(x606)))+(((IkReal(-1.00000000000000))*(x590)*(x594)*(x604)))+(((IkReal(-1.00000000000000))*(x589)*(x601)))+(((r01)*(x590)*(x596)))+(((IkReal(-1.00000000000000))*(x590)*(x598)*(x602)))+(((IkReal(-1.00000000000000))*(cj1)*(pp)*(x599)))+(((x611)*(x621)))+(((IkReal(0.0361000000000000))*(cj0)*(x600)))+(((IkReal(-1.00000000000000))*(x590)*(x593)*(x600)))+(((IkReal(-1.00000000000000))*(sj1)*(x589)*(x620)))+(((IkReal(-2.00000000000000))*(cj0)*(x602)*(x612)))+(((x589)*(x595)))+(((IkReal(-0.0361000000000000))*(x611)))+(((IkReal(-1.00000000000000))*(x601)*(x607))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((IkReal(-483025.000000000))+(((IkReal(-1282970.00000000))*(cj3)))+(((IkReal(-851929.000000000))*((sj3)*(sj3))))+(((IkReal(-851929.000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-1.76373686662181))*((cj3)*(cj3))))+(((IkReal(-1.76373686662181))*((sj3)*(sj3))))+(((IkReal(-2.65611510791367))*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((IkReal(-483025.000000000))+(((IkReal(-1282970.00000000))*(cj3)))+(((IkReal(-851929.000000000))*((sj3)*(sj3))))+(((IkReal(-851929.000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-1.76373686662181))*((cj3)*(cj3))))+(((IkReal(-1.76373686662181))*((sj3)*(sj3))))+(((IkReal(-2.65611510791367))*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x622=((IkReal(4615000.00000000))*(px));
IkReal x623=((sj1)*(sj3));
IkReal x624=((py)*(r02));
IkReal x625=((cj1)*(sj0));
IkReal x626=((IkReal(3475000.00000000))*(px));
IkReal x627=((IkReal(4615000.00000000))*(py));
IkReal x628=((IkReal(4615000.00000000))*(sj3));
IkReal x629=((cj0)*(cj1));
IkReal x630=((pz)*(r01));
IkReal x631=((pz)*(r00));
IkReal x632=((pz)*(sj1));
IkReal x633=((r01)*(sj1));
IkReal x634=((IkReal(4615000.00000000))*(cj3));
IkReal x635=((IkReal(3475000.00000000))*(py));
IkReal x636=((r00)*(sj1));
IkReal x637=((cj3)*(x629));
IkReal x638=((IkReal(3475000.00000000))*(x629));
if( IKabs(((gconst4)*(((((IkReal(-1.00000000000000))*(x629)*(x630)*(x634)))+(((IkReal(-1.00000000000000))*(x630)*(x638)))+(((IkReal(-1.00000000000000))*(cj3)*(r02)*(x622)*(x625)))+(((x625)*(x631)*(x634)))+(((x624)*(x629)*(x634)))+(((IkReal(3475000.00000000))*(x625)*(x631)))+(((IkReal(-1.00000000000000))*(sj3)*(x625)*(x627)))+(((IkReal(-1.00000000000000))*(sj3)*(x622)*(x629)))+(((IkReal(-1.00000000000000))*(x635)*(x636)))+(((IkReal(-1.00000000000000))*(r02)*(x625)*(x626)))+(((x624)*(x638)))+(((cj3)*(x622)*(x633)))+(((IkReal(-1.00000000000000))*(cj3)*(x627)*(x636)))+(((IkReal(876850.000000000))*(sj3)))+(((IkReal(-4615000.00000000))*(pz)*(x623)))+(((x626)*(x633))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((IkReal(660250.000000000))+(((IkReal(-1.00000000000000))*(x622)*(x637)))+(((IkReal(876850.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x625)*(x628)*(x631)))+(((r00)*(x623)*(x627)))+(((IkReal(-3475000.00000000))*(x632)))+(((x628)*(x629)*(x630)))+(((IkReal(-1.00000000000000))*(x624)*(x628)*(x629)))+(((IkReal(-1.00000000000000))*(cj3)*(x625)*(x627)))+(((IkReal(-1.00000000000000))*(x625)*(x635)))+(((IkReal(-1.00000000000000))*(x626)*(x629)))+(((r02)*(sj3)*(x622)*(x625)))+(((IkReal(-1.00000000000000))*(r01)*(x622)*(x623)))+(((IkReal(-1.00000000000000))*(x632)*(x634))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst4)*(((((IkReal(-1.00000000000000))*(x629)*(x630)*(x634)))+(((IkReal(-1.00000000000000))*(x630)*(x638)))+(((IkReal(-1.00000000000000))*(cj3)*(r02)*(x622)*(x625)))+(((x625)*(x631)*(x634)))+(((x624)*(x629)*(x634)))+(((IkReal(3475000.00000000))*(x625)*(x631)))+(((IkReal(-1.00000000000000))*(sj3)*(x625)*(x627)))+(((IkReal(-1.00000000000000))*(sj3)*(x622)*(x629)))+(((IkReal(-1.00000000000000))*(x635)*(x636)))+(((IkReal(-1.00000000000000))*(r02)*(x625)*(x626)))+(((x624)*(x638)))+(((cj3)*(x622)*(x633)))+(((IkReal(-1.00000000000000))*(cj3)*(x627)*(x636)))+(((IkReal(876850.000000000))*(sj3)))+(((IkReal(-4615000.00000000))*(pz)*(x623)))+(((x626)*(x633)))))), ((gconst4)*(((IkReal(660250.000000000))+(((IkReal(-1.00000000000000))*(x622)*(x637)))+(((IkReal(876850.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x625)*(x628)*(x631)))+(((r00)*(x623)*(x627)))+(((IkReal(-3475000.00000000))*(x632)))+(((x628)*(x629)*(x630)))+(((IkReal(-1.00000000000000))*(x624)*(x628)*(x629)))+(((IkReal(-1.00000000000000))*(cj3)*(x625)*(x627)))+(((IkReal(-1.00000000000000))*(x625)*(x635)))+(((IkReal(-1.00000000000000))*(x626)*(x629)))+(((r02)*(sj3)*(x622)*(x625)))+(((IkReal(-1.00000000000000))*(r01)*(x622)*(x623)))+(((IkReal(-1.00000000000000))*(x632)*(x634)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x639=IKsin(j2);
IkReal x640=IKcos(j2);
IkReal x641=((px)*(sj1));
IkReal x642=((py)*(sj1));
IkReal x643=((IkReal(1.00000000000000))*(r00));
IkReal x644=((cj1)*(sj0));
IkReal x645=((IkReal(1.00000000000000))*(px));
IkReal x646=((IkReal(1.00000000000000))*(pz));
IkReal x647=((cj0)*(r01));
IkReal x648=((pz)*(sj1));
IkReal x649=((cj0)*(cj1));
IkReal x650=((IkReal(0.139000000000000))*(x639));
IkReal x651=((IkReal(0.139000000000000))*(x640));
IkReal x652=((IkReal(0.184600000000000))*(x639));
IkReal x653=((IkReal(0.184600000000000))*(x640));
IkReal x654=((cj3)*(x652));
IkReal x655=((sj3)*(x653));
IkReal x656=((sj3)*(x652));
IkReal x657=((cj3)*(x653));
IkReal x658=((x650)+(x654));
IkReal x659=((x651)+(x656)+(x657));
evalcond[0]=((((sj0)*(x642)))+(((IkReal(-1.00000000000000))*(cj1)*(x646)))+(((IkReal(-1.00000000000000))*(x655)))+(x658)+(((cj0)*(x641))));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(py)*(x644)))+(((IkReal(-1.00000000000000))*(sj1)*(x646)))+(x659)+(((IkReal(-1.00000000000000))*(x645)*(x649))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x642)*(x643)))+(((IkReal(-1.00000000000000))*(r02)*(x644)*(x645)))+(((IkReal(-1.00000000000000))*(x655)))+(((IkReal(-1.00000000000000))*(cj1)*(x646)*(x647)))+(((pz)*(r00)*(x644)))+(x658)+(((py)*(r02)*(x649)))+(((r01)*(x641))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj0)*(r02)*(x642)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x643)))+(((IkReal(-1.00000000000000))*(x659)))+(((IkReal(-1.00000000000000))*(sj0)*(x643)*(x648)))+(((IkReal(-0.190000000000000))*(x647)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((r02)*(sj0)*(x641)))+(((cj1)*(px)*(r01)))+(((x647)*(x648))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x660=((IkReal(4615000.00000000))*(cj3));
IkReal x661=((py)*(sj0));
IkReal x662=((cj1)*(pz));
IkReal x663=((IkReal(4615000.00000000))*(sj3));
IkReal x664=((IkReal(3475000.00000000))*(sj1));
IkReal x665=((pz)*(sj1));
IkReal x666=((cj0)*(cj1)*(px));
IkReal x667=((cj0)*(px)*(sj1));
if( IKabs(((gconst3)*(((((IkReal(-3475000.00000000))*(x662)))+(((IkReal(-1.00000000000000))*(x663)*(x666)))+(((IkReal(-1.00000000000000))*(x663)*(x665)))+(((IkReal(-1.00000000000000))*(x660)*(x662)))+(((cj0)*(px)*(x664)))+(((x660)*(x667)))+(((x661)*(x664)))+(((IkReal(-1.00000000000000))*(cj1)*(x661)*(x663)))+(((sj1)*(x660)*(x661)))+(((IkReal(876850.000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((IkReal(660250.000000000))+(((IkReal(-3475000.00000000))*(x666)))+(((IkReal(-1.00000000000000))*(x663)*(x667)))+(((x662)*(x663)))+(((IkReal(-1.00000000000000))*(x660)*(x666)))+(((IkReal(-1.00000000000000))*(x660)*(x665)))+(((IkReal(876850.000000000))*(cj3)))+(((IkReal(-3475000.00000000))*(cj1)*(x661)))+(((IkReal(-1.00000000000000))*(sj1)*(x661)*(x663)))+(((IkReal(-1.00000000000000))*(cj1)*(x660)*(x661)))+(((IkReal(-1.00000000000000))*(pz)*(x664))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst3)*(((((IkReal(-3475000.00000000))*(x662)))+(((IkReal(-1.00000000000000))*(x663)*(x666)))+(((IkReal(-1.00000000000000))*(x663)*(x665)))+(((IkReal(-1.00000000000000))*(x660)*(x662)))+(((cj0)*(px)*(x664)))+(((x660)*(x667)))+(((x661)*(x664)))+(((IkReal(-1.00000000000000))*(cj1)*(x661)*(x663)))+(((sj1)*(x660)*(x661)))+(((IkReal(876850.000000000))*(sj3)))))), ((gconst3)*(((IkReal(660250.000000000))+(((IkReal(-3475000.00000000))*(x666)))+(((IkReal(-1.00000000000000))*(x663)*(x667)))+(((x662)*(x663)))+(((IkReal(-1.00000000000000))*(x660)*(x666)))+(((IkReal(-1.00000000000000))*(x660)*(x665)))+(((IkReal(876850.000000000))*(cj3)))+(((IkReal(-3475000.00000000))*(cj1)*(x661)))+(((IkReal(-1.00000000000000))*(sj1)*(x661)*(x663)))+(((IkReal(-1.00000000000000))*(cj1)*(x660)*(x661)))+(((IkReal(-1.00000000000000))*(pz)*(x664)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x668=IKsin(j2);
IkReal x669=IKcos(j2);
IkReal x670=((px)*(sj1));
IkReal x671=((py)*(sj1));
IkReal x672=((IkReal(1.00000000000000))*(r00));
IkReal x673=((cj1)*(sj0));
IkReal x674=((IkReal(1.00000000000000))*(px));
IkReal x675=((IkReal(1.00000000000000))*(pz));
IkReal x676=((cj0)*(r01));
IkReal x677=((pz)*(sj1));
IkReal x678=((cj0)*(cj1));
IkReal x679=((IkReal(0.139000000000000))*(x668));
IkReal x680=((IkReal(0.139000000000000))*(x669));
IkReal x681=((IkReal(0.184600000000000))*(x668));
IkReal x682=((IkReal(0.184600000000000))*(x669));
IkReal x683=((cj3)*(x681));
IkReal x684=((sj3)*(x682));
IkReal x685=((sj3)*(x681));
IkReal x686=((cj3)*(x682));
IkReal x687=((x679)+(x683));
IkReal x688=((x680)+(x686)+(x685));
evalcond[0]=((((cj0)*(x670)))+(((IkReal(-1.00000000000000))*(x684)))+(((IkReal(-1.00000000000000))*(cj1)*(x675)))+(x687)+(((sj0)*(x671))));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(py)*(x673)))+(x688)+(((IkReal(-1.00000000000000))*(sj1)*(x675)))+(((IkReal(-1.00000000000000))*(x674)*(x678))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x673)*(x674)))+(((py)*(r02)*(x678)))+(((r01)*(x670)))+(((IkReal(-1.00000000000000))*(x684)))+(((pz)*(r00)*(x673)))+(((IkReal(-1.00000000000000))*(cj1)*(x675)*(x676)))+(x687)+(((IkReal(-1.00000000000000))*(x671)*(x672))));
evalcond[3]=((((IkReal(-0.190000000000000))*(x676)))+(((IkReal(-1.00000000000000))*(x688)))+(((r02)*(sj0)*(x670)))+(((x676)*(x677)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x671)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(sj0)*(x672)*(x677)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x672))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x689=((IkReal(0.0513188000000000))*(cj3));
IkReal x690=(py)*(py);
IkReal x691=(px)*(px);
IkReal x692=(pz)*(pz);
IkReal x693=((r01)*(sj0));
IkReal x694=((IkReal(2.00000000000000))*(py));
IkReal x695=((IkReal(0.190000000000000))*(cj1));
IkReal x696=((cj0)*(py));
IkReal x697=((px)*(sj0));
IkReal x698=((r02)*(sj0));
IkReal x699=((pp)*(sj1));
IkReal x700=((cj1)*(pz));
IkReal x701=((r00)*(sj0));
IkReal x702=((cj0)*(r01));
IkReal x703=((IkReal(1.00000000000000))*(r02));
IkReal x704=((r00)*(sj1));
IkReal x705=((IkReal(0.380000000000000))*(pz));
IkReal x706=((px)*(sj1));
IkReal x707=((IkReal(0.380000000000000))*(cj1));
IkReal x708=((pz)*(sj1));
IkReal x709=((IkReal(1.00000000000000))*(pp));
IkReal x710=((IkReal(0.0361000000000000))*(sj1));
IkReal x711=((cj0)*(r00));
IkReal x712=((IkReal(0.380000000000000))*(py));
IkReal x713=((IkReal(0.190000000000000))*(sj1));
IkReal x714=((cj0)*(px));
IkReal x715=((cj1)*(r02));
IkReal x716=((pz)*(r02));
IkReal x717=((IkReal(1.00000000000000))*(pz));
IkReal x718=((IkReal(2.00000000000000))*(px));
IkReal x719=((px)*(r00));
IkReal x720=((IkReal(0.380000000000000))*(r02)*(sj1));
IkReal x721=((IkReal(2.00000000000000))*(x691));
IkReal x722=((cj1)*(x711));
IkReal x723=((IkReal(2.00000000000000))*(cj0)*(r02));
IkReal x724=((IkReal(2.00000000000000))*(x690));
IkReal x725=((IkReal(2.00000000000000))*(x692));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((x696)+(((IkReal(-1.00000000000000))*(x697))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x701)))+(x702));
evalcond[3]=((IkReal(0.0172981600000000))+(((x707)*(x714)))+(((py)*(sj0)*(x707)))+(((IkReal(-1.00000000000000))*(x709)))+(x689)+(((sj1)*(x705))));
evalcond[4]=((((sj1)*(x693)))+(((cj0)*(x704)))+(((IkReal(-1.00000000000000))*(cj1)*(x703))));
evalcond[5]=((((IkReal(-1.00000000000000))*(pz)*(x703)))+(((IkReal(-1.00000000000000))*(x719)))+(((x695)*(x711)))+(((x693)*(x695)))+(((IkReal(-1.00000000000000))*(py)*(r01)))+(((r02)*(x713))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj1)*(x693)))+(((IkReal(-1.00000000000000))*(x722)))+(((IkReal(-1.00000000000000))*(sj1)*(x703))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x693)*(x717)))+(((IkReal(-1.00000000000000))*(x711)*(x717)))+(((IkReal(0.190000000000000))*(cj0)*(x704)))+(((py)*(x698)))+(((IkReal(-1.00000000000000))*(r02)*(x695)))+(((r02)*(x714)))+(((x693)*(x713))));
evalcond[8]=((IkReal(0.0533981600000000))+(((IkReal(-1.00000000000000))*(cj0)*(x694)*(x716)))+(((x701)*(x721)))+(((IkReal(-1.00000000000000))*(x702)*(x724)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x707)))+(((sj1)*(x701)*(x705)))+(((IkReal(-0.0361000000000000))*(x701)))+(((IkReal(2.00000000000000))*(x697)*(x716)))+(((IkReal(-1.00000000000000))*(px)*(x694)*(x711)))+(((x696)*(x720)))+(((pp)*(x702)))+(((IkReal(-1.00000000000000))*(x697)*(x720)))+(x689)+(((IkReal(-1.00000000000000))*(sj1)*(x702)*(x705)))+(((py)*(r00)*(x707)))+(((px)*(x693)*(x694)))+(((IkReal(0.0361000000000000))*(x702)))+(((IkReal(-1.00000000000000))*(x701)*(x709))));
evalcond[9]=((((x721)*(x722)))+(((IkReal(-0.380000000000000))*(x719)))+(((r01)*(x694)*(x708)))+(((IkReal(0.0361000000000000))*(x722)))+(((pz)*(x704)*(x718)))+(((IkReal(-1.00000000000000))*(r02)*(x705)))+(((IkReal(-1.00000000000000))*(x709)*(x722)))+(((IkReal(0.0361000000000000))*(cj1)*(x693)))+(((r02)*(sj1)*(x725)))+(((cj1)*(r00)*(x694)*(x697)))+(((x694)*(x698)*(x700)))+(((IkReal(2.00000000000000))*(r02)*(x700)*(x714)))+(((IkReal(-1.00000000000000))*(x699)*(x703)))+(((cj1)*(px)*(x694)*(x702)))+(((cj1)*(x693)*(x724)))+(((IkReal(-1.00000000000000))*(r01)*(x712)))+(((r02)*(x710)))+(((IkReal(-1.00000000000000))*(cj1)*(x693)*(x709))));
evalcond[10]=((((r01)*(x694)*(x700)))+(((IkReal(-1.00000000000000))*(x694)*(x702)*(x706)))+(((IkReal(-0.0361000000000000))*(x715)))+(((IkReal(-1.00000000000000))*(x693)*(x705)))+(((IkReal(-1.00000000000000))*(cj1)*(pp)*(x703)))+(((IkReal(0.0361000000000000))*(cj0)*(x704)))+(((x693)*(x699)))+(((IkReal(-1.00000000000000))*(cj0)*(x704)*(x721)))+(((IkReal(-1.00000000000000))*(x705)*(x711)))+(((IkReal(0.380000000000000))*(r02)*(x714)))+(((x698)*(x712)))+(((IkReal(-1.00000000000000))*(x694)*(x697)*(x704)))+(((IkReal(-1.00000000000000))*(sj1)*(x693)*(x724)))+(((IkReal(-2.00000000000000))*(cj0)*(x706)*(x716)))+(((r00)*(x700)*(x718)))+(((x693)*(x710)))+(((x699)*(x711)))+(((x715)*(x725)))+(((IkReal(-1.00000000000000))*(x694)*(x698)*(x708))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((IkReal(-483025.000000000))+(((IkReal(-1282970.00000000))*(cj3)))+(((IkReal(-851929.000000000))*((sj3)*(sj3))))+(((IkReal(-851929.000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-1.76373686662181))*((cj3)*(cj3))))+(((IkReal(-1.76373686662181))*((sj3)*(sj3))))+(((IkReal(-2.65611510791367))*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((IkReal(-483025.000000000))+(((IkReal(-1282970.00000000))*(cj3)))+(((IkReal(-851929.000000000))*((sj3)*(sj3))))+(((IkReal(-851929.000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-1.76373686662181))*((cj3)*(cj3))))+(((IkReal(-1.76373686662181))*((sj3)*(sj3))))+(((IkReal(-2.65611510791367))*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x726=((IkReal(4615000.00000000))*(px));
IkReal x727=((IkReal(3475000.00000000))*(pz));
IkReal x728=((sj1)*(sj3));
IkReal x729=((py)*(r02));
IkReal x730=((cj1)*(sj0));
IkReal x731=((IkReal(3475000.00000000))*(px));
IkReal x732=((IkReal(4615000.00000000))*(py));
IkReal x733=((cj0)*(cj1));
IkReal x734=((IkReal(4615000.00000000))*(sj3));
IkReal x735=((IkReal(4615000.00000000))*(pz));
IkReal x736=((r01)*(sj1));
IkReal x737=((cj3)*(r00));
IkReal x738=((IkReal(3475000.00000000))*(py));
IkReal x739=((cj3)*(x733));
IkReal x740=((IkReal(3475000.00000000))*(x733));
if( IKabs(((gconst6)*(((((r01)*(x727)*(x733)))+(((sj1)*(x732)*(x737)))+(((IkReal(-1.00000000000000))*(x731)*(x736)))+(((IkReal(-1.00000000000000))*(x729)*(x740)))+(((r00)*(sj1)*(x738)))+(((IkReal(-1.00000000000000))*(x730)*(x735)*(x737)))+(((r01)*(x735)*(x739)))+(((r02)*(x730)*(x731)))+(((IkReal(-4615000.00000000))*(x729)*(x739)))+(((IkReal(-1.00000000000000))*(sj3)*(x726)*(x733)))+(((IkReal(-1.00000000000000))*(sj3)*(x730)*(x732)))+(((cj3)*(r02)*(x726)*(x730)))+(((IkReal(-1.00000000000000))*(cj3)*(x726)*(x736)))+(((IkReal(-1.00000000000000))*(x728)*(x735)))+(((IkReal(-1.00000000000000))*(r00)*(x727)*(x730)))+(((IkReal(876850.000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((IkReal(660250.000000000))+(((IkReal(-1.00000000000000))*(r02)*(sj3)*(x726)*(x730)))+(((r01)*(x726)*(x728)))+(((pz)*(r00)*(x730)*(x734)))+(((IkReal(-1.00000000000000))*(x731)*(x733)))+(((IkReal(876850.000000000))*(cj3)))+(((x729)*(x733)*(x734)))+(((IkReal(-1.00000000000000))*(cj3)*(sj1)*(x735)))+(((IkReal(-1.00000000000000))*(x730)*(x738)))+(((IkReal(-1.00000000000000))*(r00)*(x728)*(x732)))+(((IkReal(-1.00000000000000))*(sj1)*(x727)))+(((IkReal(-1.00000000000000))*(x726)*(x739)))+(((IkReal(-1.00000000000000))*(cj3)*(x730)*(x732)))+(((IkReal(-1.00000000000000))*(pz)*(r01)*(x733)*(x734))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst6)*(((((r01)*(x727)*(x733)))+(((sj1)*(x732)*(x737)))+(((IkReal(-1.00000000000000))*(x731)*(x736)))+(((IkReal(-1.00000000000000))*(x729)*(x740)))+(((r00)*(sj1)*(x738)))+(((IkReal(-1.00000000000000))*(x730)*(x735)*(x737)))+(((r01)*(x735)*(x739)))+(((r02)*(x730)*(x731)))+(((IkReal(-4615000.00000000))*(x729)*(x739)))+(((IkReal(-1.00000000000000))*(sj3)*(x726)*(x733)))+(((IkReal(-1.00000000000000))*(sj3)*(x730)*(x732)))+(((cj3)*(r02)*(x726)*(x730)))+(((IkReal(-1.00000000000000))*(cj3)*(x726)*(x736)))+(((IkReal(-1.00000000000000))*(x728)*(x735)))+(((IkReal(-1.00000000000000))*(r00)*(x727)*(x730)))+(((IkReal(876850.000000000))*(sj3)))))), ((gconst6)*(((IkReal(660250.000000000))+(((IkReal(-1.00000000000000))*(r02)*(sj3)*(x726)*(x730)))+(((r01)*(x726)*(x728)))+(((pz)*(r00)*(x730)*(x734)))+(((IkReal(-1.00000000000000))*(x731)*(x733)))+(((IkReal(876850.000000000))*(cj3)))+(((x729)*(x733)*(x734)))+(((IkReal(-1.00000000000000))*(cj3)*(sj1)*(x735)))+(((IkReal(-1.00000000000000))*(x730)*(x738)))+(((IkReal(-1.00000000000000))*(r00)*(x728)*(x732)))+(((IkReal(-1.00000000000000))*(sj1)*(x727)))+(((IkReal(-1.00000000000000))*(x726)*(x739)))+(((IkReal(-1.00000000000000))*(cj3)*(x730)*(x732)))+(((IkReal(-1.00000000000000))*(pz)*(r01)*(x733)*(x734)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x741=IKsin(j2);
IkReal x742=IKcos(j2);
IkReal x743=((px)*(sj1));
IkReal x744=((py)*(sj1));
IkReal x745=((IkReal(1.00000000000000))*(r00));
IkReal x746=((cj1)*(sj0));
IkReal x747=((IkReal(1.00000000000000))*(px));
IkReal x748=((IkReal(1.00000000000000))*(pz));
IkReal x749=((cj0)*(r01));
IkReal x750=((pz)*(sj1));
IkReal x751=((cj0)*(cj1));
IkReal x752=((IkReal(0.139000000000000))*(x741));
IkReal x753=((IkReal(0.139000000000000))*(x742));
IkReal x754=((IkReal(0.184600000000000))*(x741));
IkReal x755=((IkReal(0.184600000000000))*(x742));
IkReal x756=((sj3)*(x755));
IkReal x757=((cj3)*(x754));
IkReal x758=((sj3)*(x754));
IkReal x759=((cj3)*(x755));
IkReal x760=((x757)+(x752));
IkReal x761=((x753)+(x759)+(x758));
evalcond[0]=((((sj0)*(x744)))+(x760)+(((IkReal(-1.00000000000000))*(cj1)*(x748)))+(((cj0)*(x743)))+(((IkReal(-1.00000000000000))*(x756))));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x748)))+(((IkReal(-1.00000000000000))*(py)*(x746)))+(((IkReal(-1.00000000000000))*(x747)*(x751)))+(x761));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x746)*(x747)))+(((py)*(r02)*(x751)))+(((IkReal(-1.00000000000000))*(cj1)*(x748)*(x749)))+(((pz)*(r00)*(x746)))+(((IkReal(-1.00000000000000))*(x760)))+(((IkReal(-1.00000000000000))*(x744)*(x745)))+(((r01)*(x743)))+(x756));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj0)*(r02)*(x744)))+(((IkReal(-1.00000000000000))*(sj0)*(x745)*(x750)))+(((IkReal(-0.190000000000000))*(x749)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x745)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(x761)+(((r02)*(sj0)*(x743)))+(((x749)*(x750)))+(((cj1)*(px)*(r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x762=((cj1)*(cj3));
IkReal x763=((sj1)*(sj3));
IkReal x764=((IkReal(3475000.00000000))*(cj1));
IkReal x765=((cj0)*(px));
IkReal x766=((py)*(sj0));
IkReal x767=((IkReal(4615000.00000000))*(pz));
IkReal x768=((cj1)*(sj3));
IkReal x769=((IkReal(3475000.00000000))*(sj1));
IkReal x770=((cj3)*(sj1));
IkReal x771=((IkReal(4615000.00000000))*(x765));
if( IKabs(((gconst5)*(((((IkReal(-1.00000000000000))*(x768)*(x771)))+(((IkReal(-1.00000000000000))*(x763)*(x767)))+(((IkReal(-1.00000000000000))*(x762)*(x767)))+(((x770)*(x771)))+(((IkReal(-4615000.00000000))*(x766)*(x768)))+(((x765)*(x769)))+(((x766)*(x769)))+(((IkReal(876850.000000000))*(sj3)))+(((IkReal(4615000.00000000))*(x766)*(x770)))+(((IkReal(-1.00000000000000))*(pz)*(x764))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((IkReal(660250.000000000))+(((IkReal(-4615000.00000000))*(x762)*(x766)))+(((IkReal(876850.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x767)*(x770)))+(((IkReal(-1.00000000000000))*(x764)*(x766)))+(((IkReal(-1.00000000000000))*(x764)*(x765)))+(((IkReal(-1.00000000000000))*(x763)*(x771)))+(((IkReal(-1.00000000000000))*(x762)*(x771)))+(((x767)*(x768)))+(((IkReal(-4615000.00000000))*(x763)*(x766)))+(((IkReal(-1.00000000000000))*(pz)*(x769))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst5)*(((((IkReal(-1.00000000000000))*(x768)*(x771)))+(((IkReal(-1.00000000000000))*(x763)*(x767)))+(((IkReal(-1.00000000000000))*(x762)*(x767)))+(((x770)*(x771)))+(((IkReal(-4615000.00000000))*(x766)*(x768)))+(((x765)*(x769)))+(((x766)*(x769)))+(((IkReal(876850.000000000))*(sj3)))+(((IkReal(4615000.00000000))*(x766)*(x770)))+(((IkReal(-1.00000000000000))*(pz)*(x764)))))), ((gconst5)*(((IkReal(660250.000000000))+(((IkReal(-4615000.00000000))*(x762)*(x766)))+(((IkReal(876850.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x767)*(x770)))+(((IkReal(-1.00000000000000))*(x764)*(x766)))+(((IkReal(-1.00000000000000))*(x764)*(x765)))+(((IkReal(-1.00000000000000))*(x763)*(x771)))+(((IkReal(-1.00000000000000))*(x762)*(x771)))+(((x767)*(x768)))+(((IkReal(-4615000.00000000))*(x763)*(x766)))+(((IkReal(-1.00000000000000))*(pz)*(x769)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x772=IKsin(j2);
IkReal x773=IKcos(j2);
IkReal x774=((px)*(sj1));
IkReal x775=((py)*(sj1));
IkReal x776=((IkReal(1.00000000000000))*(r00));
IkReal x777=((cj1)*(sj0));
IkReal x778=((IkReal(1.00000000000000))*(px));
IkReal x779=((IkReal(1.00000000000000))*(pz));
IkReal x780=((cj0)*(r01));
IkReal x781=((pz)*(sj1));
IkReal x782=((cj0)*(cj1));
IkReal x783=((IkReal(0.139000000000000))*(x772));
IkReal x784=((IkReal(0.139000000000000))*(x773));
IkReal x785=((IkReal(0.184600000000000))*(x772));
IkReal x786=((IkReal(0.184600000000000))*(x773));
IkReal x787=((sj3)*(x786));
IkReal x788=((cj3)*(x785));
IkReal x789=((sj3)*(x785));
IkReal x790=((cj3)*(x786));
IkReal x791=((x783)+(x788));
IkReal x792=((x790)+(x784)+(x789));
evalcond[0]=((((IkReal(-1.00000000000000))*(x787)))+(((sj0)*(x775)))+(x791)+(((cj0)*(x774)))+(((IkReal(-1.00000000000000))*(cj1)*(x779))));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(py)*(x777)))+(x792)+(((IkReal(-1.00000000000000))*(x778)*(x782)))+(((IkReal(-1.00000000000000))*(sj1)*(x779))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x791)))+(((py)*(r02)*(x782)))+(((IkReal(-1.00000000000000))*(r02)*(x777)*(x778)))+(((pz)*(r00)*(x777)))+(((IkReal(-1.00000000000000))*(cj1)*(x779)*(x780)))+(((IkReal(-1.00000000000000))*(x775)*(x776)))+(((r01)*(x774)))+(x787));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj0)*(r02)*(x775)))+(((IkReal(-1.00000000000000))*(sj0)*(x776)*(x781)))+(((IkReal(-0.190000000000000))*(x780)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x776)))+(((x780)*(x781)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((r02)*(sj0)*(x774)))+(x792)+(((cj1)*(px)*(r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x793=((IkReal(923.000000000000))*(cj3));
IkReal x794=((cj1)*(r02));
IkReal x795=((sj0)*(sj1));
IkReal x796=((IkReal(923.000000000000))*(sj3));
IkReal x797=((IkReal(5000.00000000000))*(cj4));
IkReal x798=((cj1)*(pz));
IkReal x799=((cj0)*(sj1));
if( IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(r00)*(x796)*(x799)))+(((cj3)*(x797)*(x798)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x797)*(x799)))+(((IkReal(-1.00000000000000))*(cj3)*(py)*(x795)*(x797)))+(((x794)*(x796)))+(((IkReal(-1.00000000000000))*(r01)*(x795)*(x796))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((IkReal(-695.000000000000))*(r00)*(x799)))+(((IkReal(-695.000000000000))*(r01)*(x795)))+(((IkReal(695.000000000000))*(x794)))+(((x793)*(x794)))+(((IkReal(-1.00000000000000))*(r01)*(x793)*(x795)))+(((py)*(sj3)*(x795)*(x797)))+(((px)*(sj3)*(x797)*(x799)))+(((IkReal(-1.00000000000000))*(r00)*(x793)*(x799)))+(((IkReal(-1.00000000000000))*(sj3)*(x797)*(x798))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst2)*(((((IkReal(-1.00000000000000))*(r00)*(x796)*(x799)))+(((cj3)*(x797)*(x798)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x797)*(x799)))+(((IkReal(-1.00000000000000))*(cj3)*(py)*(x795)*(x797)))+(((x794)*(x796)))+(((IkReal(-1.00000000000000))*(r01)*(x795)*(x796)))))), ((gconst2)*(((((IkReal(-695.000000000000))*(r00)*(x799)))+(((IkReal(-695.000000000000))*(r01)*(x795)))+(((IkReal(695.000000000000))*(x794)))+(((x793)*(x794)))+(((IkReal(-1.00000000000000))*(r01)*(x793)*(x795)))+(((py)*(sj3)*(x795)*(x797)))+(((px)*(sj3)*(x797)*(x799)))+(((IkReal(-1.00000000000000))*(r00)*(x793)*(x799)))+(((IkReal(-1.00000000000000))*(sj3)*(x797)*(x798)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x800=IKsin(j2);
IkReal x801=IKcos(j2);
IkReal x802=(pz)*(pz);
IkReal x803=(py)*(py);
IkReal x804=(px)*(px);
IkReal x805=((px)*(sj1));
IkReal x806=((r01)*(sj0));
IkReal x807=((IkReal(0.0513188000000000))*(cj4));
IkReal x808=((IkReal(1.00000000000000))*(pp));
IkReal x809=((IkReal(2.00000000000000))*(py));
IkReal x810=((pz)*(r02));
IkReal x811=((cj1)*(sj0));
IkReal x812=((cj3)*(cj4));
IkReal x813=((IkReal(1.00000000000000))*(sj1));
IkReal x814=((py)*(r00));
IkReal x815=((pp)*(sj1));
IkReal x816=((cj0)*(r01));
IkReal x817=((IkReal(0.380000000000000))*(pz));
IkReal x818=((r00)*(sj0));
IkReal x819=((pz)*(sj1));
IkReal x820=((IkReal(2.00000000000000))*(cj0));
IkReal x821=((pz)*(r00));
IkReal x822=((r02)*(sj1));
IkReal x823=((cj1)*(pz));
IkReal x824=((r00)*(sj1));
IkReal x825=((IkReal(2.00000000000000))*(cj1));
IkReal x826=((IkReal(0.184600000000000))*(cj3));
IkReal x827=((py)*(sj0));
IkReal x828=((IkReal(0.380000000000000))*(r02));
IkReal x829=((cj1)*(px));
IkReal x830=((px)*(r00));
IkReal x831=((cj1)*(r02));
IkReal x832=((cj0)*(r00));
IkReal x833=((IkReal(0.184600000000000))*(sj3));
IkReal x834=((cj0)*(py));
IkReal x835=((IkReal(1.00000000000000))*(cj1));
IkReal x836=((IkReal(0.139000000000000))*(x801));
IkReal x837=((sj3)*(x800));
IkReal x838=((IkReal(0.139000000000000))*(x800));
IkReal x839=((cj1)*(x832));
IkReal x840=((sj4)*(x801));
IkReal x841=((cj4)*(sj3)*(x801));
evalcond[0]=((((x801)*(x812)))+(((cj0)*(x824)))+(((cj4)*(x837)))+(((IkReal(-1.00000000000000))*(x831)))+(((sj1)*(x806))));
evalcond[1]=((((sj1)*(x827)))+(((IkReal(-1.00000000000000))*(x823)))+(((IkReal(-1.00000000000000))*(x801)*(x833)))+(((cj0)*(x805)))+(x838)+(((x800)*(x826))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x806)*(x835)))+(((IkReal(-1.00000000000000))*(x832)*(x835)))+(x841)+(((IkReal(-1.00000000000000))*(r02)*(x813)))+(((IkReal(-1.00000000000000))*(x800)*(x812))));
evalcond[3]=((IkReal(0.190000000000000))+(((x801)*(x826)))+(((IkReal(-1.00000000000000))*(pz)*(x813)))+(((x800)*(x833)))+(((IkReal(-1.00000000000000))*(py)*(x811)))+(x836)+(((IkReal(-1.00000000000000))*(cj0)*(x829))));
evalcond[4]=((((x831)*(x834)))+(((sj4)*(x838)))+(((IkReal(-1.00000000000000))*(x833)*(x840)))+(((IkReal(-1.00000000000000))*(px)*(r02)*(x811)))+(((x811)*(x821)))+(((IkReal(-1.00000000000000))*(x816)*(x823)))+(((sj4)*(x800)*(x826)))+(((IkReal(-1.00000000000000))*(x813)*(x814)))+(((r01)*(x805))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x826)*(x840)))+(((IkReal(0.190000000000000))*(x818)))+(((x816)*(x819)))+(((IkReal(-1.00000000000000))*(r02)*(x813)*(x834)))+(((IkReal(-1.00000000000000))*(pz)*(x813)*(x818)))+(((r01)*(x829)))+(((r02)*(sj0)*(x805)))+(((IkReal(-0.190000000000000))*(x816)))+(((IkReal(-1.00000000000000))*(x814)*(x835)))+(((IkReal(-1.00000000000000))*(sj4)*(x836)))+(((IkReal(-1.00000000000000))*(sj4)*(x800)*(x833))));
evalcond[6]=((((IkReal(-0.380000000000000))*(x830)))+(((IkReal(-0.380000000000000))*(x810)))+(((x809)*(x816)*(x829)))+(((IkReal(-1.00000000000000))*(x808)*(x822)))+(((IkReal(2.00000000000000))*(x802)*(x822)))+(((IkReal(-1.00000000000000))*(cj1)*(x806)*(x808)))+(((IkReal(-0.380000000000000))*(py)*(r01)))+(((IkReal(0.0361000000000000))*(x822)))+(((IkReal(-0.0533981600000000))*(x800)*(x812)))+(((IkReal(-1.00000000000000))*(x808)*(x839)))+(((x810)*(x820)*(x829)))+(((IkReal(-1.00000000000000))*(x800)*(x807)))+(((IkReal(0.0361000000000000))*(x839)))+(((IkReal(0.0147561600000000))*(x841)))+(((x809)*(x810)*(x811)))+(((IkReal(0.0361000000000000))*(cj1)*(x806)))+(((IkReal(2.00000000000000))*(x805)*(x821)))+(((r01)*(x809)*(x819)))+(((cj1)*(r00)*(x804)*(x820)))+(((x809)*(x811)*(x830)))+(((x803)*(x806)*(x825))));
evalcond[7]=((((r02)*(x802)*(x825)))+(((IkReal(-1.00000000000000))*(sj0)*(sj1)*(x809)*(x810)))+(((IkReal(-1.00000000000000))*(x804)*(x820)*(x824)))+(((IkReal(-1.00000000000000))*(x805)*(x809)*(x818)))+(((IkReal(-1.00000000000000))*(x805)*(x809)*(x816)))+(((IkReal(-1.00000000000000))*(x808)*(x831)))+(((IkReal(0.0533981600000000))*(x801)*(x812)))+(((IkReal(0.0361000000000000))*(cj0)*(x824)))+(((IkReal(0.0361000000000000))*(sj1)*(x806)))+(((IkReal(-1.00000000000000))*(x817)*(x832)))+(((x801)*(x807)))+(((IkReal(-2.00000000000000))*(sj1)*(x803)*(x806)))+(((IkReal(-0.0361000000000000))*(x831)))+(((IkReal(0.0147561600000000))*(cj4)*(x837)))+(((x806)*(x815)))+(((IkReal(-1.00000000000000))*(x805)*(x810)*(x820)))+(((px)*(x821)*(x825)))+(((cj0)*(px)*(x828)))+(((r01)*(x809)*(x823)))+(((IkReal(-1.00000000000000))*(x806)*(x817)))+(((x827)*(x828)))+(((x815)*(x832))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x842=((cj0)*(r00));
IkReal x843=((cj1)*(sj3));
IkReal x844=((sj1)*(sj3));
IkReal x845=((IkReal(1.00000000000000))*(cj3));
IkReal x846=((r01)*(sj0));
IkReal x847=((x845)*(x846));
if( IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(x842)*(x844)))+(((r02)*(x843)))+(((IkReal(-1.00000000000000))*(cj1)*(x842)*(x845)))+(((IkReal(-1.00000000000000))*(x844)*(x846)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x845)))+(((IkReal(-1.00000000000000))*(cj1)*(x847))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((r02)*(x844)))+(((x843)*(x846)))+(((x842)*(x843)))+(((IkReal(-1.00000000000000))*(sj1)*(x842)*(x845)))+(((cj1)*(cj3)*(r02)))+(((IkReal(-1.00000000000000))*(sj1)*(x847))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst1)*(((((IkReal(-1.00000000000000))*(x842)*(x844)))+(((r02)*(x843)))+(((IkReal(-1.00000000000000))*(cj1)*(x842)*(x845)))+(((IkReal(-1.00000000000000))*(x844)*(x846)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x845)))+(((IkReal(-1.00000000000000))*(cj1)*(x847)))))), ((gconst1)*(((((r02)*(x844)))+(((x843)*(x846)))+(((x842)*(x843)))+(((IkReal(-1.00000000000000))*(sj1)*(x842)*(x845)))+(((cj1)*(cj3)*(r02)))+(((IkReal(-1.00000000000000))*(sj1)*(x847)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x848=IKsin(j2);
IkReal x849=IKcos(j2);
IkReal x850=(pz)*(pz);
IkReal x851=(py)*(py);
IkReal x852=(px)*(px);
IkReal x853=((px)*(sj1));
IkReal x854=((r01)*(sj0));
IkReal x855=((IkReal(0.0513188000000000))*(cj4));
IkReal x856=((IkReal(1.00000000000000))*(pp));
IkReal x857=((IkReal(2.00000000000000))*(py));
IkReal x858=((pz)*(r02));
IkReal x859=((cj1)*(sj0));
IkReal x860=((cj3)*(cj4));
IkReal x861=((IkReal(1.00000000000000))*(sj1));
IkReal x862=((py)*(r00));
IkReal x863=((pp)*(sj1));
IkReal x864=((cj0)*(r01));
IkReal x865=((IkReal(0.380000000000000))*(pz));
IkReal x866=((r00)*(sj0));
IkReal x867=((pz)*(sj1));
IkReal x868=((IkReal(2.00000000000000))*(cj0));
IkReal x869=((pz)*(r00));
IkReal x870=((r02)*(sj1));
IkReal x871=((cj1)*(pz));
IkReal x872=((r00)*(sj1));
IkReal x873=((IkReal(2.00000000000000))*(cj1));
IkReal x874=((IkReal(0.184600000000000))*(cj3));
IkReal x875=((py)*(sj0));
IkReal x876=((IkReal(0.380000000000000))*(r02));
IkReal x877=((cj1)*(px));
IkReal x878=((px)*(r00));
IkReal x879=((cj1)*(r02));
IkReal x880=((cj0)*(r00));
IkReal x881=((IkReal(0.184600000000000))*(sj3));
IkReal x882=((cj0)*(py));
IkReal x883=((IkReal(1.00000000000000))*(cj1));
IkReal x884=((IkReal(0.139000000000000))*(x849));
IkReal x885=((sj3)*(x848));
IkReal x886=((IkReal(0.139000000000000))*(x848));
IkReal x887=((cj1)*(x880));
IkReal x888=((sj4)*(x849));
IkReal x889=((cj4)*(sj3)*(x849));
evalcond[0]=((((IkReal(-1.00000000000000))*(x879)))+(((sj1)*(x854)))+(((cj4)*(x885)))+(((x849)*(x860)))+(((cj0)*(x872))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x849)*(x881)))+(((x848)*(x874)))+(((IkReal(-1.00000000000000))*(x871)))+(((sj1)*(x875)))+(x886)+(((cj0)*(x853))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x854)*(x883)))+(((IkReal(-1.00000000000000))*(r02)*(x861)))+(x889)+(((IkReal(-1.00000000000000))*(x848)*(x860)))+(((IkReal(-1.00000000000000))*(x880)*(x883))));
evalcond[3]=((IkReal(0.190000000000000))+(((x848)*(x881)))+(((IkReal(-1.00000000000000))*(py)*(x859)))+(((IkReal(-1.00000000000000))*(pz)*(x861)))+(((IkReal(-1.00000000000000))*(cj0)*(x877)))+(((x849)*(x874)))+(x884));
evalcond[4]=((((sj4)*(x886)))+(((x879)*(x882)))+(((IkReal(-1.00000000000000))*(x861)*(x862)))+(((IkReal(-1.00000000000000))*(x881)*(x888)))+(((sj4)*(x848)*(x874)))+(((x859)*(x869)))+(((IkReal(-1.00000000000000))*(px)*(r02)*(x859)))+(((IkReal(-1.00000000000000))*(x864)*(x871)))+(((r01)*(x853))));
evalcond[5]=((((r01)*(x877)))+(((IkReal(-0.190000000000000))*(x864)))+(((IkReal(0.190000000000000))*(x866)))+(((IkReal(-1.00000000000000))*(sj4)*(x884)))+(((r02)*(sj0)*(x853)))+(((IkReal(-1.00000000000000))*(sj4)*(x848)*(x881)))+(((IkReal(-1.00000000000000))*(r02)*(x861)*(x882)))+(((x864)*(x867)))+(((IkReal(-1.00000000000000))*(x874)*(x888)))+(((IkReal(-1.00000000000000))*(x862)*(x883)))+(((IkReal(-1.00000000000000))*(pz)*(x861)*(x866))));
evalcond[6]=((((x857)*(x864)*(x877)))+(((x858)*(x868)*(x877)))+(((r01)*(x857)*(x867)))+(((IkReal(-1.00000000000000))*(x856)*(x887)))+(((x851)*(x854)*(x873)))+(((IkReal(0.0361000000000000))*(x870)))+(((IkReal(2.00000000000000))*(x850)*(x870)))+(((IkReal(-0.380000000000000))*(x878)))+(((IkReal(0.0361000000000000))*(x887)))+(((IkReal(-0.380000000000000))*(x858)))+(((IkReal(-0.0533981600000000))*(x848)*(x860)))+(((IkReal(-0.380000000000000))*(py)*(r01)))+(((IkReal(0.0361000000000000))*(cj1)*(x854)))+(((IkReal(-1.00000000000000))*(x848)*(x855)))+(((IkReal(-1.00000000000000))*(cj1)*(x854)*(x856)))+(((IkReal(-1.00000000000000))*(x856)*(x870)))+(((IkReal(2.00000000000000))*(x853)*(x869)))+(((IkReal(0.0147561600000000))*(x889)))+(((x857)*(x858)*(x859)))+(((cj1)*(r00)*(x852)*(x868)))+(((x857)*(x859)*(x878))));
evalcond[7]=((((r01)*(x857)*(x871)))+(((IkReal(-1.00000000000000))*(x854)*(x865)))+(((x863)*(x880)))+(((cj0)*(px)*(x876)))+(((IkReal(-1.00000000000000))*(x852)*(x868)*(x872)))+(((IkReal(0.0361000000000000))*(sj1)*(x854)))+(((IkReal(-2.00000000000000))*(sj1)*(x851)*(x854)))+(((IkReal(0.0533981600000000))*(x849)*(x860)))+(((IkReal(-0.0361000000000000))*(x879)))+(((px)*(x869)*(x873)))+(((r02)*(x850)*(x873)))+(((IkReal(-1.00000000000000))*(x853)*(x858)*(x868)))+(((IkReal(-1.00000000000000))*(sj0)*(sj1)*(x857)*(x858)))+(((IkReal(-1.00000000000000))*(x856)*(x879)))+(((x875)*(x876)))+(((IkReal(0.0361000000000000))*(cj0)*(x872)))+(((x849)*(x855)))+(((x854)*(x863)))+(((IkReal(0.0147561600000000))*(cj4)*(x885)))+(((IkReal(-1.00000000000000))*(x865)*(x880)))+(((IkReal(-1.00000000000000))*(x853)*(x857)*(x866)))+(((IkReal(-1.00000000000000))*(x853)*(x857)*(x864))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:genericrobot - katana_300_6m180 (1b79c52d66ae5b70249a715a46cdbd58)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
